::
:: Botherless Security Script
:: https://github.com/foodchaining/botherless
::
:: Copyright: (C) 2021 foodchaining
:: License: GNU GPL v3 or later
::
::
@ECHO OFF & SETLOCAL & SET BOTHERLESS_FILE=%~f0 & SET BOTHERLESS_ARGS=%*
PowerShell -Command "& {" ^
	"$C = Get-Content -Path '%BOTHERLESS_FILE%' -Raw -Encoding 'UTF8'; " ^
	"$X = $C.Substring($C.LastIndexOf('P2kjEpbW5A') + 10); " ^
	"Invoke-Expression -Command $X}" & EXIT
:: P2kjEpbW5A

$ErrorActionPreference = "Stop"
Set-StrictMode -Version "3.0"

$BLVersion = "0.1.0"

$VOID = New-Object -TypeName "PSObject"

$ERRGET = New-Object -TypeName "PSObject"
$ERRSET = New-Object -TypeName "PSObject"

$script:BLFlags = $null
$script:DGStatus = $null
$script:AMStatus = $null

$ETBL91 = [byte[]][char[]]('!#$%&()*+,-./0123456789:;<=>?' +
	'ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~')
$DTBL91 = [byte[]]::new(128)

# The content of this variable was generated by .\bsstool.ps1
# (on Windows 10 Pro, Build 19043.1083)
$EncodedWDACPolicy = [byte[]][char[]]@'
oC=!*1!!!!&!9b5wv!Bu\Hx.&!Sgs-!!/!!!F^[#X6;^\2C3ye/CVO/<#`LkPf>X|/i?{.e!([h!`V2%
a2i?LWjVD&&X2%([CCB<=?y?dT}(4Q3TK#|.i#f(+7no)[_L%xgfYf>x>x[V!yci17jLO/tCGZ.Z~D[v
VhV%[nxSD4Zw%i/OyL}KAac(#mW62j?M8cwsepc^}QJt0*F_1j+_=i(t=-J}z}n$Q?*TMg&(.?H*,.0Y
rAfP<PK}o__)-&^J3sl}5#[>f2HPwK\P+mEUwZR:l;ff,2yF6`HcL%+qd32w;[-)EhuR:<CnaIZ5H=Z.
]FWNKHDr*0|[*+UeM^.uv6Z0HKy[dkIIte}AVkG:[S\[|4X(&m-D`F?FgzvN<:(B<TkOh%6u,mCzjai%
6XqN:wj|Xr!E&.L|A>k3^E-oo{~E8T/}RLCkQA&-q-}>%?3biM(ymDVPljg0?j}53soriU4c7-VAo&ap
wkNCOz(E9?ao#Ss&_T!e.bBRJ()a=NpP5bSHbc<vvY1{euG`VM3HZF/SFC:o`f).y8g:R,]%~y}>wM2P
0+Mlj^\ZKHIQ4+u=SAO)Z*-^5Tp;O[]B,^xdl1n_x8aTnBi?k38|L)-}\}(y8>7^)C-jqNz|aKWv`Eqq
mV.P9a)4q#N(WuAkG}h2.j_kUBA,y8{>{#Y?\qR$7C;ce<3-f2B?}5ZgFRF^(ZLpSkrrP>1:<KmJ+7_y
fYSlwZ{TM2k5J+d:G)seA?5sY3Mx\VMF]YmFqR*Pwznm*H)ubwB?;`eof//R6VCG{F7lc;$xsR`tRS<l
*kOvR[XF}-PGsC.>.5w-U(:w^n$yMiMvbSA{;O}s-NN#lY<[\x[-|hSAZ&G>;#[L1?Mzqgb&~S3c12:z
s1/-^4%-oPW/*BnnEepwUdW0h:Kw0o<+Z3~em8[G1Nlz,Hq/Tufo{RTi]*4^%ZGGa=DR6V==U3do_$zA
.tRf7cyL&SL;FV>iVZ!mJdYB}Aalo3:wJ)zmXf+S/WoK`2Ly#54uaz;8#|l}dH_i_Htz52G;EFbozgvm
&Og&.h|$T:sZMW%-TAJvjE>0HQ-OJHw_8^Cka-x]t+\y]TEnK?Jyk>Eq~rULj4N\3bpf\:6DZ7(Cq0l]
bo8s89m^iPtw%|2,rY1-ba}{7a[YO/q.~wz;x##.5wr/#NQ]xF,OjY>ozF1Y6Hm!Uee}HAP}HQg>SK+_
G7r.J6/c>G|3txkOTuTl2Fk;d=ALXvux>v7K4cY6~^q5Ys1{oN=eF4ik01Ew_`;gk{`04ru-kpTjEI6U
6/-v&n{to^9<zAVDwooLxZx8xQ~$n,Ue(A:w~DpZOgX}&=mbS-a/\MQ,<RVMF;*GF6k8sK*l-K.-iFSC
0^o|DDi[=h-6~eS+?kNEZn8>izoj.MCnoCiFi2;r!41G?4BHv%)A2Y8KZ5qVkR_MVF4z]>z}]Xd2Dx+P
v1cDLpNG%jHm(f[*XN..Ki9>?s=#$.*HuMu},iHBn[aq4L1pm{-mj:0N_([\T:Z7MbjYte6il<T[}<!8
ES{uik`uDE9r%i4/Bol4#se[tix4$UK}ZuRu?-V3ga,u?WikS+1RIc}aE<5ctoly!~2#H{[cTdNv}c>J
#;5wk?+\p)%Sd,^?pkHui*[+o9GZBrpx#Xe>AUvt^n$s?w~q\v!Gm/[?f\wL*G!&I-U)w6ARJOw;SAuS
Bw^s*HZw4-ibLdE3lZlzN;+a]u{7Jvtl*PlXJ:vGsi{}y`=7IN0w3kji`l(3gDk;0:a\*f=<tv1eJ:`4
r%mvO`Qu%>u)1U+{B$Qs)\&O)2*L#eE::w~=r[eZ:lbNpbEnWX,}`8L;w^)agntxu]{:]^rni]:o8G{8
M3ZONyWZJnO\>Xm-xS:%8wlkR>ViG|YpEK}npUc!Ag&G}7)fnb>Q<tbfEOoyZX4oUR:jsR8oOYNHImkm
Z`!3r|[Zc-778?)Y83:sh)t|Kou^B0:V?d!XLFG?oz_:6Rr[i_iK?B%,?7&p=Y2|lEH[o1YfEa\H)B(O
/f7apcOU_FL%]/2<pb_e=`<rE*`#P(`RO:<+>h(z&vM=_z]LnF3Od=5?V{>n)[~FYcY;_f[xcaQP]1^%
yd!B(>A1CWD>|Arj1z}+seH5(*/<;bg?OtVN+uEM|CF^QnC2~%,Xk{hiiCoUpSnq{Egf<4tx,MMgb^!A
0jOIf5.UGq,H8B0?zM,?]B4ffoQm,kyrTY(b%y^#<g|XM>)TgEPR3a/I|HJ_6nV,|UrwytiP>ug7&^}k
^[OXPjb78ME/:-N9*bcC{/e#R=0)XMjF:6FbVw(?gGS!?_UBWXI/gIs0oI{TEOS_VcQ:yBDJx]DGtGYz
BZSy\Cs[hW|j~T;)b0V5aG.oZ|-{nx6vAt|:KA0?:P0IVDFt=fnJ2F=ZD.bg8?J]}`e1zR]JQ8DY6P~x
F-2p7}UlW<LOqWV>\rs?M{rDXa{KsOg:W2KucjaR$Ej7m[/p;bS>gRzGJQ)lT*)SDruj).ttt,SNN^[O
mjX_[Sr3&W*GN8tQ|OYAuvue!|/\1rpOeyX-rCv2$i~&-hOOXzIp(je&5{bc.=rpnLp\c_T$>9IHb;SG
+9b_80gUkKulIi`a_Xv`Jf+WyJXt#llfcL$$P(:ymv>vo\Tf#kgx{P%$P]6+uh5S{MdlJm1{<Ov`IE#Z
XwsEH{|:cz;5fDmckSGgNsY8=7VEn`gn<bi6p/VJdJ=a&>`)5t[`#ab6O7s[TN>^/(nD[P{$_Fm5{OmH
Kl-4Ef~5Qvt&8MxUfiW0-aJpe{?3#HFIV{so\/VYzlC0Ig74MHAbJZKgiGXs:eK}sck_voFeNLY&c*<V
bu[cmgu]t8xY}R5Y3YMGMz6fI+G=>61A^Aye)[B(#m\yim{6Cm{^[;(|x7+p(D9K#KA_ID8BoeiRq*PY
v.&:!{8AguwDW=/ERwYx-H<$|{wR_cNz:(VOhFW%%hEgj*QNns-`6uxz6vh#&[[$\,>1[wk;[P~(-sDM
PiKhAuYDAbwvL|:NPlER\$C51FSe($)INs7yh(|-?D_+O^ZPFCXvr:u;9]O*dF_IM\XbpW[ASe~B>}{Q
S/{>+c<sd8i?H+28%)r+LXh7%;\}7)&y%72iGh/O)x-xJgCP$txuE[jNby3[d1*MsMlifDsyJMgE<y*P
.PQ:y}KFY5WSiDWx~0czkfZ{Y<?Le8Ts^DVaOe9J2}%4<n,klefq}L.?}e)LxWg&P(B<!4L!t8BRcvkS
hfF?;LHg\8%Gt%Zj6T2t`f%eFI_35,tU\Lj\UNMivgxch!UV=/$Omq:5~#{yyT{|Y5&As\eSRP7vb-bf
wEx)+ntMm6}BfjSzZn<Q;a_$r:D{{F`},\${\{V4MzF#,JBPFk8ZaosPmb_GtcAM0{ry3i>,jD#T:uLo
4]xR2{AIZ4WYUE\;ZKK?t[]rkHJJQgxV)wspwxaIIIF9ZQVM?SB6<zaYNOq_\K{tsc^B+8rnOGCadO{e
x^R8GDr:B2iH~;#sv;e+:siLy0>6HO-`[dqNvhJl:K?`JWr^yT?Is|zqyz,{[?g7BiYy1w!cC?oXANcU
`<dR9prj_|r%xqd_q5Pp&Je9WMSk<11lwOQXZqc?G+qGb7Qyi=^kA%Kw[s[TJOWX89|t$R#=taI;}=&O
TPEytNC`v1ALZGCw]z`DCZd7[$*Q2=<3ojuxhr`c^GjnRw2M-hp&8z#gbz8PT=qCUez<G.`>\_?gCTZG
-#GH[1T^z}Pn7O9X*-)$]M.YXIYB)5TGDG.e[o>I,M0|kGBUIw%5HiQ-L-djCJIRab&8r`nV8zXo9LA]
&C4PKmz`t6uj>y&4%/Y|SBg3;7I[DI|9_}sB%A?^VX~_4rYWH`cS*vYYoA(fI_G1Vc-%zq,nm9x?+h2=
:8v^Q6>+.XevaEyj6#V{dvIk{nqRf7/iK}iq]M?xdnGgVc2zyX/R3Cwg7/ox21;]+a+Xo-8[{VRk>8MD
~W>81C10<;AD)*lj/1Y#4xL.y.Ul/YMfo05R2PXI~<,ovFdSAzszvgZZQkV>?l:z=5*!\%;W6kMAJf<v
GWx[^q\QSYJ:6f_3XRHC4|%ee[x%eMNoJTu{=C.92IEpnjnm/syq>DQ3.ok?Z)]9=M4V=x9-jYdF8Q|a
TBfZZ8EM^iUer#AyrN(MBid,f3V;}L|h_$~tCimHnMq&36U^|u*y%Z29W^%0/nE$!yANO{/8:BVAiZsc
r<HA;C-/t*Z6ql\Uz{S*TMJf_CqLlfww.}3>PkN&S*,t0oAO_AGs}d[w#hUf$gyMsO$R(Jj2(&_4_xl(
nb%&5VJHh2#*#.W=Y|M-jDX]m:y?_7:3W>r6;Dm5N[p4}Yn!on{+D|;WaXAi2pZ)D1`R>1/F:\t09Z5S
_EFpnzYt+ra{9R_DvKm&b0V;z}`p1N,i+U0FofZStHm|TK=CqjnpxWO[Ax>a_w{#LpBS}8J2fgs:FHyG
`tGXf&O${/o4SR|j=#%&c-1LU-FG*xgRx#jlGz#DCSoPs]YlMi+eziOZ_36Ok+f:u.gBRBDickugv;b=
Q/FB:^DeOpBhs:(>0YtYgUKy5bX6MpO,|J7tw_nk-*KKil:V#.#BjNIWp(Bzyay>oF0w[JF8Izry>P\Z
26GxCp9yW++wu(1626Uce|[1=E|(\ZScsMm84lB=R=;o}EKAqYop$?]QW|r4%^e{tG/]ey-90Vl,Tj:A
[/LSBqK7l^%0[Ii=n]NnK\Yba8p.]ZrK5`L-.?Lzck]&ZIU=pz=\QO$gJU=LB;sLFr(2\hX(Xn\=?f+}
PJN),6~mnZ4Cxp<Y*ax^`D+m{*0x}6]P4j(cX2|}l=<=}4{zk5<e19VI&s6Jlvb>2[0ywnkNVF2r!K-E
i`+|)n<5&<plmmn_6;3IYx=v_vX(%1DAqF(JeN|r>F\BOx;w6Iuovs\J[BfuD$x`GcYpRmALiW[w$=;z
RWxC^3A[D>1{us\lT:P[?8R;$`=MIlqq!X2KYml>)m*_J|]*u8;vUiUHKJInKPZ6ee(*2uHUbBN#vbre
-ozDi$wibqH=rg)BWU#wL?HWHN/ht6{[KJ{7YjpI/jWZ>m)m+F;IlHDlGsppqHdi;W#xFZujiMqdHbCY
97{5=>x0hs3WvIJQ5x7p2u+&Fw0U*w~132cMpd~=e57dzK+!yhwAgOblkyO>qZtGi]?l42=IG/g0}d$y
HKu1}FWs)IT=^S~CC^:Q;(0j.\p93-,q015d{_}JySac]fvpjm/d5D5EEnut|O+=Yd}0<fDBIMz<O6^&
3UtHXq\YblQHe=$7YIY3)8DJnSabERKd}$YPwD%Yy5]JZEsE1,}Zt8R7qWhtV++`FKs-FbwbeG9Mh|PO
l}9+juhrFypDY*9>sOIygPwr^Lvsvw+L0O*}JI&r}S]t%+I\jw};t_iXC/lk]n.MiMv<_o4EZAr1NK+>
Qt(M1*g{pp.kI]5spH5f.U]+]+Kzr(!}Vv0Aw>O|zM.A:XMC?vle<>/j2r^jh6oVV[sEyx8rCd*Fz\:i
NPOZQ]5Iy19(DqeA]`Aj7{:jv_KPY:[N;I,EgptI/p`::LP4[yemL3q>ZNiJ4vr;FxE}#DXm5$o#KH7O
eRlf7lte/u%`$r2k)Q-C$tyzN8q7[uyIk{H+o;8-S3m5o7(+V&iBciP^QkiPIWm=p^kL?f=B&Pnb(?K]
afAV=I~4ejL1!m[/EmohhG|vOBY|awZ>{!14f:m=$Lqj(u7_po{zOk?pb0X5]?nlV0a)7Sb9.Pp7cdro
W`Q-/Ar%q7/;O`K8G5[2RVNP_`(Gl4>=PGikV7eewb_0u]A;5P]aB%Q*Ig_Y4Y6)3eNPAQU-Dn#{3681
=b)<DBXj0r{452HQ=3P=v;{8IfeR:<J5XYG+Y]2{Ic$HK0=T.iI`?kfBoNINs<x?aB6uM\QO/yr=!N|%
A.hG]E6B)bB`q5O9cddDL{sP[P,1bbOY-MO9\k,^FpIEHVf=wlGDhsA?YO%gZWF2dO-O]}IYCwiBz_X9
-eV2Ig05?mhUkKQ0n[*9RU?6Kq>y{<Ws9N26V:FJOf&>Y3=|AD+8j/$?L!Ny#tZX|O|q_2D{]lQ&_fZ!
uII&|Mp}_F*hd7/I9}#Zc>|t=(,-|-U2{v*%.6$p5eMbD=F_%raePLagthy,h],;V1A[OUIAd/GrFxmd
+n|l{mljBRScfjD{-FLF.o&3T|=hq4=oozx|=++\Cz`5vt`iUO^rV}kci8gz=7Vx&{u0|8Wvh_lK2tD_
Y/CwdLS3y8N)lSK{6g%6-wd3j^S*xYsTD736M=q8fbJ]6gk)uZm}>5_bt}>J`Q52g<YO1<7F*t=/gqA9
nkm=tK?yoWU[[%6;\V^PT*<]$j]m%<\/}p`6c==\]{&eSlqSdG,YLO&a\l)oM4(zQ-BPkt/;Cz(Cgta$
ZN8X5SdoXlaTRc`LR]Na`Ljs&mqqgkCSg}#c9rB8#r(6=3][.ghXCE4n,KEw=#FJ|b:9o|tqaj)Efb4^
ifrKdI~90u<X4WuOXXE7p4/&1qsS(lp[!s,jg3CV4n$M4,!QYy4rXe7we(2kW%!ub<pq+l#nYI^=v|(=
HyAfyS5\)[-u^#e#jN9CB=RERSdzKe7f{%d{7Th4Lv<,,&pY67v&,M]6(dr&|-Gm!*&ZS;b8W6Do{D3<
$fGP{P6[~g:=<s\4FX1ZAZ,N]KndLPwm7_0ReoO2sT=<`}.xeC3ft4\fp8rEAfNvq{Pa1vr:AwWEoe2]
i^R0~}H&I|5<OOI|M,sU/=%qhMi/*\2<BFL=g_=o?b!h,1<0zzu64dgI>ww]xCg>gr!-aD2vjzeMR:X$
(ulJE+lPj8Bu\/>R,=*{N9YUm)Kq%xy}h/Z6\mG[y?Dw#ZVFfGyNVoSflJ4Q,PqwxiU]>2B#bf_Pz-)K
LAvBXuxfm/LXgNM7!s3YOv}el;N_9O}!rbVbRhDH#Hv3R^Jf}WV(aZ5PY]ac,$D>r/illE[2&R~J|lZZ
:!1p,}5^8g?z?SVjcaVgV;X;,YRB(uJH_)`6wp}7(f,Ve&(siI]8il;Q:8R,CeYrg_t-+{>d3hkv7V<f
>e,GMi`ZLH6;VMrUD9x:DA5/=eVJ^4yzi8~JtV(e!xdi}#|s;W.9,NSVf,A1rSvUo;qw&GU4Qe)3]Mq8
l/P{Lc:_NhMi)Dsv0;Df~pKf|v4e$OB++nW!,q5*x-df4v?x64FYU\}kA7NBJ74-A,8J8PN(Q].;LE&6
?m.u(<!fnCSlIBPPhlcRlh|bBM+H#REPCn}NeJxvhU~%Dw,r/Bn4*c];!v>ALp8^<T4l|H(G{>|WKeaJ
+kv7StBSjYrDS4G_!0Pj0*l&Ox}mk]uPc7WwKtQe%}!64K#fF>2n>tt_`f-m(Z>F8MylJN}^wQ{A!?lO
MWUjYqtZgpB#5Txo,z?$R]cljML2|k;mWXy:s!w&AR.;Tz!hsZ#NuX}8;I:T#i1Q^SAp3Rs_p}%BbEw&
~dvS8Mhe?T#K65u2s!,J\=5fm3:{v/L$otu<m6v+|8nK3P_#N(M9Ulgolf,Cc+G3_E:P]B9a+5Oo%o]P
mt_$7rm>|Fz38bs31>ND)0{0z#Ez{v{dU)b};|NyO$*Y2Q!lZo5Y#sDP{^e.vVd+MkrI{vm8TOfRHuk5
<I(z]m*8D##t7QNfSnx<rufJ>jt>iCjX#g?T,K#Xf\ad%yuD%{tsH[.NmDnsVxui,RX>DJGXtLsn#,i[
*W^hhiDS8zl)-06HN%(Q[-m^IY}f`NEwaxj8=,e#hC7G/{xJ5oiYYoD*$#f8-/|3De7`f\{U,G:][gli
\yHb[pZ`kXcJx6QQ5oq<rRe[7?4B3RTviRlMw8q<ACe.Vkk(V*UFgE|jLm9C5ffW#A5V<3bAOn~)*z6%
E5a.5X:NbJxyCc4*l5b?|pB3>3E3Rpf61UB=|1X:GP8DK(b.w0+VZJ&:9KqIZe&<6a$>x_5H6h0&JM5u
hqfpp3BtMri}Ze$G;>yj/FX?nA,DtiiRV6>maZ%msq<Ks:.tg{4q)Ox?#umBivjC+Ys5~?l>F.`uBRg?
wB%u[9zh]=*nb>db`1kG*rHN_Z$|>PvM:7WQ;w=IvcrgxVH5>E=>o^>Db;kqru{h<Eky8s#tSVdz_|aM
JFUMca3>1=y,:T}Jn[#9A_DSwimC5C<of}0m{MNvjZmLX+>x#\zov,2W.yZ]SBhK24nIGbG[x4piO)=[
rQ(RF71/#&mVFjl.1niq3?j74jDkrr\rc+Wrt8tJ\;NIhN%||];|Kr)ql$5_-/Th?VM^#F+8d(G\.w&s
bAJ(+Ohp]}tJ;&-+X_V_i$=6i!#.\};)hMiL1-#LhriWaqZM?xgmZl}SENx^u\e-\(QKmOB_vz6Jzp-s
M>Y6JhBmGQs*U64CAuSusVY|bYlmMH|YQh9<c?u1lSt\h}PZ-r>0^P~`ljhMW[F_4gO4/UGo~qa#k;e#
0z.:9-jk4fMd7:5Th+luH0\O&_EL8VJmJ/y8HlV<V3TaFw38>($\/m78z.PgSUOa|`pb3a&oOqo/mM^3
2a22}T>5<|bjx2.o);iZ#-:szPo,jn=xLq}v+:UZ[l!X`*hGYk%lU{z}]W~MjZIcqBBt49$K~zUK(6e^
<u8y_pVpn`^EYK+DIp58M;u+=PN+?vI=N/,.OFdq:3k+v+:*GRVm3Ph=(9Qc32YLB;w8[8D\g0R`u]..
FceK;vsW%w1/7Z$ngp3)rcSnDw*q0Hu13-FaZx\>b8Km+tGp8|E*gEtqh|^sF,;[x`YT(T6}k-{zY3Pk
rW__wz9^jN~8Uv]dJ{Kc{^AW`ZzCCzDMvJaCVX\wm||e.apfMFhfxs>yF5|I?2n[V{#IL9]6PrajSMJf
sf)(_Q8[j`QXSxPXOiR|Z)j>c\)lqO723K8gP/JQ|w0oxg#Pc|mtLr,]3De}[6-<&YXGypWfij-e*/9`
?\5gqzk#s<>KTP;dLg5f_r0YZmWuX$$9\^*WJ+,Y2kCqA,wvSO?ODO9OE)G|zaf[+u]4]wkgEuXenOv0
1wM`-%<jT_:MZ>Mf2H`}n9(m5M0og}GS`DS2m{r_emCbsQ3eqN*;8K_5_//[7!8MxuL;e{+9%u0|D^Y^
/#n8t+Ubvn%BJMPI\=!V9CRXR>`6$M;iY99gg}ZWbkhXIqUn<{+\8ty9(RI1_HjS,LT&3Dg8)k=l$5{T
:{*r.rgsCPa?qdeJDg.NfW:aTc+DpMq81?p|(,f(sTn&JLa|sD\QId:0Fzl%9n_UF_QT}Hm?%(r(e5U;
d>m1.8dtj8wcNc1opYH7lYY4avO&$L8.Y`gi*,jyh4pTT1Mm!2=g<kGD3o]Ji&fl8+*J?c!<^]WikT6z
yqbRPrKYHY?<Uy\(0Q/w,bn{p7;rKQf5pCeA+6?08Me19>tU{=AL[ep\/}hL7gr<kjl_~wYU|5o^gbf_
Iq*b]A%li)a\D[nV;ufeu:mYW/[|%>,/.9._&(%`w&[41gi`O{48FZ4{)yvGRO!6,BPvS*y03,;BYEZy
Kr&Okqf>7k}k&]IlL[(y`g$DHhVL,ci1.tQ{`zkWLvz%i|^Gp7=*q8(*}Z|qtzdG~KL{zF1:JU~6aiCA
-ulkS6W!-3o=Om?>7?]3\JYmRGl&V6ah{FRsWileJpJ_h[\/Mm,(sKC2+4)Sc*#kH6Ews#$c8r-*7_%M
\mAXo]P}JeL3!5O5:$B7{RnlmakDZSc|rV&2h6B>-0CZbhXe-^?*3}EeZ.4Y7[GD,0Y*oIgg&Io8k:D}
l5CuK)Sj(Uip-QKj5gK7<>aCPe~fxFIZ76sO{?^pRod^re<9lvpgOO_/F6TlN=Jy+[|$_]}aU11}cS9l
ChP}iEr5l`vPIMkbIHg_t,(/*=7oUBm=x!c[}D2Ejk%/~D-DsU$59rRI/IW3)[HuE}ZH4Ry:9WT)ZvSf
0b}_mUMn0zot;Krqi9kl;t4VsJ]cyrrRibW{.8AZ~KV]r6]e=g#Lo#eY7Xghg%vw$2v8qU|&UeyrYDQW
NE%S{*/z-\_X5^~CdJWwa-[ZBvG>_=(=i)g>lJ-vh3sQ0Kp<)8TNF$NLNQ}T{*N0flYtYMW517}&Lpmt
6d-H%\hT%kDrWT7e8YO&ZeXU4\qUm{S-Na37UT8xFUAqF(sueD;H5dyj)US)eU>P=Gq7iI<$2-_]oAJ[
z^L\~z4ky6}j0}6>;BGxebqv3g-:94?O,BeI1+-}-BKJ=YF[WGs=4Q|#;3-58SE[!]1kYa]2(gVfvh~0
$9yb]ojk`HIR87Z69j`e~[e>fOH6okRvj,$\q1%oG)QBDdweKDN<nkHbY/LbswUo=xr)+#Bsr|v+-]Ga
JD<ZPu}hz7!75UES(dSokea-~K)h.Pzt#Dslxc\V1lbM|p|unP.S}s)U?n%wS[D{_y<`/g[Hz|DgGr$%
hvB%xe)AP{XV2kEy&WD2lx=S~>Tu;XGIWiYY+i~KdMx2zDthmz_bXa7uqf2RX\w)cOo;q{+grptEiK/+
wvAPd.J`bppEFD%y-(*rs<MEKnLr?O*rnh$(;7?0x!Rk>.b\sB}D,`63?r68?77O38`-?r%V[N?4aM]a
)09P1/eg4/X_R>GR#+`#2x.t0V^gKYjXvd!_;4pv+DS|CphW$>~kZ#IGZwx55:iM!Pu43)0qhIrT`xPO
GX}w.!se6y+;3(Tz<yb_n\4}oz?8T<lPQ<w$-]Url5ema2ZnE[eg1KYXg)|6v%G|5U]?cj!egEOl[d`7
23,0D8$Nocc)Q1W[]Oeys8n+%5F:ndZC]3s{P0g^Fg!n,za0![}|*L`6m`VG^Uc7FhB^;OE7-l/>Aul[
I0.(l3*Cyg4{j1RqE+^84}Q]{f#<5hQ)Vt=sOJlBp[R45gAT?9<z5f#kaom{`t!94pp5=IdI<o7RswX2
KGJR_Mo3?X/qsZo93JizC7LP0=itx4eMxOAT9CCi]P^A}>Ouh_s`kQ>6-z!u]6WEmSg3VtEczI*7+^;t
c4-6lW_`^z\,mJ,MrT)SRSgMW_A{V|8I}1f6^>5^w-wQgX#FGc%1`<5c.A#oA0g/^sh]7jREPndI&3q[
-.zM#=+k#_**DF\7|s07$wR=~lEafErHbSOLwI1eYqIZYJe>xUHx*d!5Pd$lP&GPXn_k|0y8W0%($HM;
i=QIyO(c[atZVd*%V|-IslNs0T/{-g/`fAM2tXZsw>^u3|cBmWDMayId\F`4:j<O#S~3Gs]C{%sDYc)r
y+wYCm*,/RV)XGC7U*if!&g8)lPD`A>n?9N&J51#3ERGYrZi[9.jlz^v1^)tavzlwK4O[^{Kc75UI>[y
EuC-(X5YXHc=4)?z9{I|NbCR_Y$2:{!cE[uo>4R[37Fu>ucD``n\qJss4zfO}ZUvZO$j>xMf]_?dh+_Y
{t)uwP/mXm?hX_BJ:y*ws<:vtWQDlG,?2CKaUYpt+>gv)}w*vK*5\+?by9`H(jV/A^?hPOn}oQ{\V{%1
LAZ-jsjc*p_y=;&4EuKqAfD\HuLkqtloG2\OF>Xk3ia*|moGor}&oqguGR[n{F<k)-7?RgRD~ckMe4Ue
;6l3Oipml=*L8\U+j2W5\L0XKoS/\]Ch/U`x[fHNdalAGPf{UA*S8>{-`w`f$xBrNPxfbvA0.-<[Q*I:
{p8/9PK2GvGtA|N[8%XMf0GEjF4lF#RrHO>6f/Y<:Pgd:d,F4|tTiQ|#MGZ>c^QPVs(<4Ko{D|v7x-Hs
c_R--o+U(s+weXI(YJmKDt~f]ZqFE1w|gGnsu_AxTaFaFeV`.>!C~j0x.|T|VUT:TJTaCd:iKZuOb>=z
X(/{A,.xq9?UI78Ru4j:-M7.iA|lw}:(bA_BOT|(SueL5I{j<^t4LIRYC}#b)b_hO]PL&rhFJ;useRI`
Tt+_bq!i%L6Jmew<k\_d)]9YP8=7Gq^x3e8oox4Kp5dHca,t\[<BaD|.0r|j8M7vDf7yMyVAj8l]/|ZC
oMbB$!5EnN0=:LGH![uu(?A-{?JGl{3BHMY25v|+,2nK7y]Rdf:;Wsy$`$fwkNvty+roDzDz:7Ea]hT<
8i8S[uhaG8Q}OfpZmdjiZPnEv0d0<zrzU00|6-`u{!xU}?kg%P/`5)W3&:c{\:Xi2ZIJl$Zc#l]C?SO,
|zpH;G)n`kWW`z`{FEkawok1V>aut;cVq{DnBtDrmfbze}~pS;|7iaK<sb|gow<Y&epq*T6}{.E2UeAr
,S+S2.GTrr1pDh89:wH6rxHc>?h}#[f8wL0*9dX?#1Jkczf`c^N>[94/p]O*f{_C$s<O~Q0L{Jr70plV
Oyurt4n[n!zpE+)_6U^<`c)Dek8Z:jUO[W!h:a^UL=mxKJAP}Dr/p7i9UMxg4vz_7ZybY)#ICt[d4p,g
)WvMfm,#XP{nd>9Yf0uT109*]aPHnsa83|A,/g_e[Eq%drc;]]__x}4Ij&(foG&3d|Nol9cfD_B:JbRe
L;pM^w}%ho^zYMrUzu8vX|,(sK7Z]N$&F?Kr4Xz9<rC5]Y:p[q[*?l8zYM12DnvT6/z`HfEIEE=9E,b.
Ba3f%tt/V>]$<XIS>?;}$XLT1`hUrTuQdU4J|>mf1i;=un3+_^jR3*_g3mS4MUFA8T&qWGnE4h9v(29M
nb}5WT0u}088v&UHxK6mfaP0,OMxX`9Bo|h-jP2YPxUV;2(a[h}L8D2zCo<0F)5d34;,d^!_H0ZuKs~t
=b(GI9X|lHR-d6V!>`)xkDwqdcR^$[7siReHVE1z1<x3q9hwF7voi3}-9t%om_9<0Nb(I1\Q*+v0=3UO
ljs:ks+R~>#<CBhDnYa5mn_EXFC-lzzU8<.rj;ZQ}=ct*M)pM{cuxHRrT\{3UNwi0izv/}Br+65sEe]4
D0$qjTh4m`szFnXck<}|k,KwnxfA9hO`R}[[xI_\LD0Z`{Qy~<Oq1gHmE*ASt5EaL}4)2x4=(8)FQphs
qxb+6>CxZGy8qU_79w{qGqT)=!seSX{]tP{Q1SzOVU`Z{#w5|u{_uji$7.mnlcP|CZOfty7|HuM=&E!R
2v_U-dF+sDj7>Rz|v{=[iD,xBAH93K(cqHOGRT|ve\[VYWwCaB};+6>l,Z7<Kp1PlyV?-jW6pHpaE)!z
y|8,qIxAxc6.-z4A3=GvMX>N.+N>k5{4I}pdpOCRVEn)#xEwLMVFR*0O(\q3e\-zpNly*d;Clo?f+H8M
!2vg>63efp/F<}mjrBKi9v%rV2sALG$S{Ndl]yPvQ/ROJ;L<FRA?n,;VI51.e^XbhrF/eMl.MvM{^S=:
R=0|gNbMp>,sVos7FLkAe.^dve[1fv(AA+5mi+Ej*82n=|Ie)L9L5lZQgUF`rT8rnumulRx|Av_m:1du
+`LJ(MA-:S.B$\Y=J^NEX2k[7Y0j:9`L5ao}2B=YHAO91RaK0h!y]#v[.#sML_CU0<1EwOhz6[G?G9o/
$C>-.%t{H9FJ%aA`5kG,WKacsQjQ,?Ap2G{O>eM*W?eWObOtv_s0p^Rh`n7ol2hWY`EFl$2R!A\.R-5V
g538x/07ogosq;i<X*&(?M?&q`b<baN]8Nw-7[p&RDZ6Wq>gK[e(2\#^x[a\.WL9w=WluGC+E,c.a{KI
l9PorcLAH)DuTMo<tZ6/?>&JN%it!]qD}Uq0sUt<|qcr#56d|4.v,T|aPfW%k<^8*zma6CsvER1\K+!O
ci8bCkf4&ckL5gzH=zDs0o(z/09cS;W/#=n*qemSabi5c3*kN|^:X0Uf-`WLtx+VLnrImOCs_FQ>w2%0
1jBea=:b6+j3*ol;7XTbYG$BBgynDv5OUk;zRe}B\l,d{80^NaEP><$7_OF!YbzciUf)RH>v,g^|W}-F
Md5i\N`zbv#[u1`?siMZe4cL#O[t3N^R;jpH6<$tu):^\xfUiz]l$,,=b%QV`=701g$o;0PM{-d:5q<P
6%`x.dK`iK,Bc{AU+I[u<}`ahj3?ZzuPb76jmdYVBvb)(=O#wJlQ)VN2(-\v0bFEY16YNyJevNV{<X7i
JeUrf3n%{d}yavF[|va)K,QgW(4f+fuAh_sN4lZQWfxJi-vcmKIZ^kxAx&{$fBcH_,O/7TIOOdO6*okI
`3M^)x3BWV;fo`O|N9ez]j&{aR5?cXvk%1A8wHIgAUg#%WJH%t{fU=H<>9TmiV{lm/Zuqae^J/DQte;a
C?;loJE1qa`D_17[:pY5FVAH2}~I^d|$<V92js-YR3flj*58kVa!be)D3E5iwE)zetBV-OrI?8/Cd*t-
<v28nA/-:w5;kFhUlo.S#>!Xh8btB=dcy_Uvx5nD2x+1ZKFe[mO2t5:r$/%82b*y9Lyy[N0kMj(0R\X(
6>%T>g~vG&}X3]3XF%T/}+7)cpfsGlXv[&2`rOW^2{6gr;;77P0:iN`|hle:$,VcCF2Dtt.l-n:lrwZz
*0k\z#4>3)d8Q8euKYUL><k<Tt*i{0z4usBJbJOhj.54z7T_5tKiyG>HLm2N+{i%+xwmAvy\ef$qgaq=
M1Fs>PsO<}F&I*8cL)p55&Qwf<tZH0HsD*^oWY^t0a8V#.M&j8!+L-<2+xZa#)tq&pf(Y7mQe\A^V4FC
DFyoVQra{%FuFS&dv/%MECbOPJ<x4XzUAJ`z<eA6<euc2eWPe>qs8>!,xcD`S.]BiMEENvPN!PByXdlY
QH.>BXe4~:a.gp9\o]l}a^H`{&RdqBd0Gq5\9kDaF,8b:H\,\C;hO{K2<HAE.\`ZnXbu+ycZsA;^9>1.
15$k2xZn1D9kA=41h8KQi-8}d87Zoa8yu57lIUE|a}q[BS>m/o+Dwbrg(M1>>fG_G9*Ne^yFSyw*]e~.
^Tc<mC^[$o?i6[*3rn5.Ec|y5PF#|X7ua?$E%1#g2arxqxzhHua#E=Pe^2s)Gug+FzUI~[Mkx--v%[Mh
vu1q2Fhi}OGm>}Y/+2={0kkq++lqH`wV%rN1ke7dU9POvcTfKl.3YFQ3J03Sa0Sxv2Ewo,:W?9B:3K1o
{=xi47#ORK]}Hl,CZYv7B=(AnK*fh{hpr/3pTBwG-p%&86o^]dQn%P|0*=/-5&6if#fPXzCUcj_6E}PG
,9p\M\\0Zp;<bcu{g-xMmGneJSd8r0P-:XcO?q%HH_4WrB!g>mVF<j}OMaFW>yfp!sx)x8%}G;l4fH?w
*L9w;02Vlp*C~5(X!FvH?KC`~f[pB(;E2PxPP;#KC`[03q3h?#?Wn_k`QN_4U-):tt7BwD3n)#HqD$E7
dBl-%]!B7dV|/19dMLg^Uk02a%86cB&ZHdi3`C>T%3KjIR`nCX*G-Y}CVqkYXR_)&SN\(\.T{L:/6P6X
V}X4*`E7Yy)5zDGGh\?KR|O#Ez=+YKyI2uv|e6c_{cMeaC*|eK-/JC]t,WMV?2AO8xXi!VU-7V5QVz!^
dU,$+xZP=gRT,_`X/24[Riv$!xyc!7EPhK2DgHBaK`~J|#KSSObKKR-%C_Pa*kX]ZZro}LoLX*&aB[/6
eob85wYC?+IMVutTUf9sGNRN\6Hp6OKfFDOi%<%85wI^C?scF1Er2Y6Q,{9)xuT4_8{26]WT<=^{swFN
^.v45mZ3|h~{9zLH-S0LfZM-Qxm=3zP-gu,.(w+pBM8lr+LPnFp`5A09uh28%a:hJ_lio8dOxn4|y%tg
]]zOb}D]5UQC[6xnJ4Cf0Z)LNH\.c8x!:qlF5xyCKc}7Os!}3mxOVwbw7rz#DErb`?gI8[J9g{;!Fye:
Ge.`GLP-vO1Y3PHYJw545bI6C$6PS/7Jr3zz+o>cxF(|QE_dhU~c2_p9TtIdgGf5eaRu<TRPQyR=;6:w
0_SaI5}=rn\mb<|q3N8r#OVC2I(IqC4sgj2;_3hO(wV5fF%)!vQIA[&_|4p\jM<dLreR]Cx.>DP/)CB=
nBO:G1ypNKqX}<z3y&-a|S>6YB4AO1vt[h.%6u8uoOh<[0R=}tdkImg?py-tMi~Lb.tA2Dwu|mTijzg#
zspQQOQ*58TM*/j3Mp5u6%Ye\x`Y93MoAJ%?$V4z2Y+vKX(h5m(spd+Y>L4aopw}5hi<yl(i1p/>l{B+
SA67.c~b<+M\fW);7kK8,at%n?+.Vc%\)0HPvcSpd#k%2J-m5?|/Jo&p-IBv8NDvOx0|[+]c-G*fO{V8
aPQ\)Lc/s4xvR4y/gthFvYnkF1v`Y8L%Ji]{mZQzm:3V(G$.NaPgC[)%m$XB4`Wx2#udIIu?jj+ZEZDK
\8`IvRb1-C],>b$lHn1um^W1:0]W<q:8|ulSl_(5aB%#YvSN)#vo{sLU`d/DFKUBp}LNCIo?T>>JYaAJ
AP+uG3\[<P-:%|Om!YoqP{Av;KM-K?J_|g*m-k<YXGhvMf;9ZXuW6v,S:j1bnt,#wB|8*P.E?2l:|84p
t0,`OWvQR>![qdinq`:jKGNz]3oHI-T}&^|#/.F3gECBm_9l|=(LZ=3eQ1!BfFhY%brADB:a&[C2Gqcz
H%A?M1swI\;>fkRS7=)NFPOl}>K_6a+d=,KoGJZ5/_qV\Ide)WRaxB&[~SJWT9L(Sq5jH`)uD<a9&?<1
(HzweC-cla4i$y#<NkePw+M\|C,.:jxqswvs\h2Ga7pd?C_uut*DgpFxp]voi[bNlz-)p)M;u.:9{;B/
g&e7gU-C$2H\l:G8)=DOXqTX$OmS5mNu_d0WA3?eo%5i+4J/Pa]l)a-vdD>dBgR*8)N[mIs&QKK9wVi.
ud)=zz)p8ADxYL;rg>_%=G9-a0AeMQ5Qw}e1ctEiIl[aDg-wUi9Z;Kqj<^hAON3ZY2YoEbVjJ\${lCz1
d5ia|Q/diq[\[_E/<$qZp6_hfspNz]wL67{Ql-=9mC2GqBMr7(:|~WK`4Un4B8hL\}|Orn{EPdae+5\*
IbJ$`Dz9M\L%;Spl0yY[j6Ou2?,O[j`MFUQY87!(oIRpm|_gYj:$Tb~G7t-{;Op^&]?(w7Gs27{8O\b)
6n>J.e5.*P47-SIaIgqRB}\TOl4Z&uEu4Zh\L[:j1kCH9vHZgMou<!0{Au=-~FAyrMjoLUCFUDPw?D+E
aHA3xzy`=rRG4SWRaj}x7QLnxwwKIYy2q`Z?x\GSO[>cQn,<W4eYN:=iueH<FIA%P+8dwL~<yq$2cOM}
Txm_[6%){^w%}2/ef}E?oU=9g;:=L4n,IRL2QRvPlNiH*x/AgxQ|nHXZO3?|1PJ5zs5N3==kl6,*kB_#
OZwlO3FFy\v{~iC>$=FHmh^5PFqpJXjN7e<{Pn96bJAu24BWSq9.#6[m`oomUB-I4r98!0_DUhY*lN^Z
+/K-C6NJh{sV3NJW;05<tFqDk_N4jNHrrLGX$:dNtUF`U<HgB]G\UOrCKf#$7[iv,>d`Y(bY_h/an}=u
0X^8yWKu1?JOSlJ*sl,+8,Hc05SFjG{+$}9=QA>[#5Ruy=9}4AP=QOU,S\#Nh8~<wlc-:}ifeenYM6iz
\2O\8X}fp{h(=8]\BY7.}3Cxs!\9bZ,aQ^Zck6T4|vzn!Dnlyv2i7Bt;7F/_aD:l/|7BcdO9vOkM8_u0
kGls*9O/TO/K6g.B%0auuO00!kT%\EhDN{1C`B`WBEhF,+;<5}cZ/p=05Pwi1C~vWc]GTfJamW:NWLL/
_v*XBgCp)%-}9B<Pw_U}D%pJJFg)0wRN$bf3BW\z|<$Yav~cdS[ErL~`MJ4B$a=YW^&ncK5vDxUIpD=,
qIke5/B|{`s3]/dTeD%dzO5s2UL<7A`-hLC)3)YKO6Je;N\,mxx<-dRo9a+Eq8(S*};A{IKo2N|s|n9y
![_A!9`qo|}6MP!rH|010AK-.;3qM=`^2I{bI$V0pf/5*FW,Q%\1bi-oF_ntuoie^F7<2kQ|Q%,:3#vU
\Iw_/#-Q-.7=j92BCX!$0zCJcAcOSkQnn\^fNe0X_!;v&<g_]PIA6\+j4M0NCV8QXO0QLV2K:VyZ7ISZ
Ka5|G1/\UyB[]zF]D[-V|7[`SdgAEDO|QNd15=dt:{j&US][Nm023RBPWLvdbbxG(nB^$8ZB<}yX{GT_
m2KNbSK(GJJCHT]nk^hFjf3!f#A{,.TiDvwea=fEFtO^9OH9DwMS?WkF^K7C7P6TF$[iHj9YKr)w~[8O
+AQL*;H{]Ky>Hma!$r6O=]Rc*^b5W^QSJp]2aIu47(vwi>;lU5W_#c}B6]CC&gx!MSIVR|V*58VOsuJd
7ggXU\vK.dTjbd*a:b4%E1i0zv&Nr!fcLcJY^j|F>^6c<9v&sBn?3M&c+xj}?ZwP1drBM,Y[UlTw>mdf
-i5PCu=ytsB3D}87X0Cbx;za.Bfu6iXr?g,0.^Alwp`>L)c9yHZMiy9S\[raLyx%j!{!bOw0e59oZ)OM
Uc+G]ao_nZ+}wM5/,R)\+.vVMSaO;!3S2alk?W6l|B:GWL7Gzw$E.im&wix>4dnhabyvKDjf5rY(),<:
=Sr2U}h#;cv$>RIT7Y8(c09JEcf8(7;-Oi5$+Gm!U$.9\Q8J)?~l44=mcft\2.$v`No+SIp$hl.^&/4j
<meHRq8_^K*&%<G{)>5+&^P|MCQxzuevo`o33)vP|jhW:9q{|\.75JA}O*_BSc=y%k61L]#Uw02.HRzo
81\},9x},.w}&wiQZx4nN&b6YvWt,X2?O}VCOg3u/!_#Bw>!/bza1B%Ke:%$TH&d!$!~:d`41R2VQ%w}
hig]\26X(:9n)=21Q!FEzP#_lR`5k}shc..pL!A;||,fW}<9%Tn`-8JsP]9GE668&N8!Jo*=p}6rH:_v
<v4bm_nSOMj4oSe}up/mV;+R_9gloP_+8MQ8\Q^xpmO}jcsV&uv}4jHg.qBs{\.7{>H>Q<7#,xxUkVa/
A!3PX.9p^|S=s%}-C=?2}00&THh}baT.7if>Rz/mVs#~-(6V&tq}DVtaq:WmEHZrC#=BX}[Fs?.O>Ru-
9}Z&Q]?2QMXu&G0-{)>qix,+bzn5*]:%EK,Us[>$Mq&9!rt>4axuaAY.y.7,w|/w\{dQeX?PM=!T#Uf3
?xa!e>}vU^G.)>D}No3()vNxhskd6ys3JgUL#mxwAj)6JnhE/gJ9}w_[p9QwExo`?29r(1LaiufyP]h]
qU~KNBrm`9+RKVAGD$G-gfa]PG`].u:|M2bPp9x0BmfeK9f&hyAu$()rOz)OvU\(B31J#4E-ahur;8zL
9q}rs*),]k|iW<z#F#mmfgBW.tTl]2B}(d[T^oX[p9t^VN1!Lgra^C_[;ynmeX~cI_o]:tp*?QW/~zd8
Tyh6m6OgQA:rd8cdk;?s{\:t:5plC7F1^|Rav}$6yMW}joabZE=fMxU=owGX9o${qj8Bn5Lr~}Qg:b3%
aESLtHTx,v\U^}$}fk1Wbi1y`1N;c:R\A<ihv=l&1uj9b`Wmv{/:i6vm9;s(N<5.cRtVYVM0/SaqAp]<
hpFj84*6.&)h5WE2asr.[n\bS)<8&UDhY2:.$w)eZTw6S<X4*6Z+oI4[:.bKTqWHeR*!VZc#Zm(WwN7*
s(gf:G&-<a2/QNWj#QJ)t9.i\bEQ[%~T*cH/`ML1;!=lVTYyn.rw?CwW%;zui$!.D<;(1r{;kR~9.W5T
W{pFnY#4EG*WbPl+C%U\R<1,6*w,Mt1WE]7*G(U\Jj>(H({O^VPKM1}#^lbUS9[Q6>S9YKumg-1/>.[9
M,K<o?!|8:!1-y[8*<yJD-2G9*p-8t$ED?);WND(V]89%R.yC*31f)c:>8^bu8\T$VsKgVAhd<g#u;7:
P5_4#(r/jV;B?p~V\T%Sp!M!I#IK:!nRp;8WgV.DE!**2GwQKW|;M{R<OV1JO%VZ]-4Lfm:.L<AG8Ko*
U!lgGjTfJWcC5!o*O!FYz#m!Y_a]$Qtxv4R9A.`bFnG$J1fl+#6*_#G$gl%!&s\j5?Q!Bj5tmY55kUCU
\??WRYx+Bjrlq?{Km#b9<{q?PDw%LSC:Cj{[2JGIm#$;m{_E%QoWY.wLwB:.1EJ1?1.ijV,v>,S9HN]b
3DKW6O2!f3Q!{#=;Wmd/[B-Rs.L<d/vA6%o.>!CjSSq/ET}EV<7K6*;&AhC#:.|,9G<>[%bRvre]+d*6
&2kUqRlH\<;O~&,y2Fc#BjyA9%p?(MVZ,%cRBW:N[b*wKW:;#sMj|;5$h9-;Z4)1{#h;O4$W#dv=x&0H
GD(!d.ooS9#%]0Bj&7KWm;([u?\;VZk#|ggVX2hEJ.i+}iTg$!>!?!&&V-6{](R9+!4!1$Y#r)^VT9)!
]!7!R)j1*_<\$Q9!^!E((#e0jE(Q,!.#a%g*K>Vg-!>!Z$8#-5GKUg(![!z%<(-fHxTg3Q!!K#v$-Fw:
](W90Q;#y,]yA<:.-Q7!:!N5Y4BjIK4!]!A(t!TTDDT9,!-#x!z1,Y0?U9A!0!G%w*`pYuGK(!$#b$}8
-$L+kE(QU!J!>*y4gkva!!M3ie*QI!z!I,Q,}Ied2QA!d$\!|;rZGKYg(!{!J$p&EqIxSg6!S!t&M(nf
6{HK7Q!#>6qMHxB.#Qd!9+KOI#^(^9+!j#-9-FJR`(S9H!2!.*Qmxh](]9?!_$H!+;CWA<A.)QP#K*N5
qmCj:.7QP!j&X/V-aVU9R!B#O%W{%*/?Z94!2$]##A%k)1C\%Qp#,,ll+_?\.Q2#2#w2T35N[9A!c$c*
Ua6NU9%!%&H/*>-f>\=Qe$}#JB`p6{R9_!A!v)NVlL1m`gK!C#/xl.]rkd\(;!)R[OoE,Q)#+$1)\;7{
]g;!Q$m,b)[OpE6QM!^&U(?Pv3VgP!,$--MyO2ua[g7#_#q4`PzBjE9QY!2(F$RZ}Iva`g1!($I(/Px&
c6&!1UAjc61!9!F$N$DDHxSg+Q!!f!Q#84e0:.)Q/!:#L!#0UA/?U9%!H-9;*!a!/!|/8Ut3Tg_gM!|!
4IzBjE&QA!1!o{pu4$uP7t4zo\UxB\QVgyGlVGuKH_`]i0!|U{WPwmfwpmj_8Vjl!/)9BxYLu}xmD(!9
V#wNk(;)Aj7)y}v8`<)>v|&<<|rOyuh<.<&0l+-:o}3WQ}^,i#vg|3:U?/*%kQzEP+];1)U#vg|3:U?/
*%kQzEP+];2WQ9tghrt#vg|3:U?/*%kQzEP+];1)U#vg|3:U?/*%kQzEP+];1)U#vg|3:U?/*%kQzEP+
];1)U#vg|3:U?/*%kQzEP+];2W9.OK~P_!?/*%kQzEP+];1)U#vg|3:U?/*%kQzEP+];1)U#vg|3:U?/
*%kQzEP+];!~)$.Ni{|hbYlMTsXfN7~6`Bq$SuQzG/rh|}%jBU?/*%kQzEP+];1)U#vg|3:U?/ZjhEzr
Kx,$|X<.S%/?!!!!+!NFGpn#^l9mq:+!#Qh8!!;!!!!!!!!!!!!!!!!!!!!!v18?}FkpEy##h,&:X_-$
!!!!d!](!!A!!!A<f!!!!!!
'@

function ArgCreateCheckpoint {
	return $BLFlags -icontains "-CreateCheckpoint"
}

function ArgTackle {
	return $BLFlags -icontains "-Tackle"
}

function ArgNoIntroWarning {
	return $BLFlags -icontains "-NoIntroWarning"
}

function ArgAllowRestrictedUserMode {
	return $BLFlags -icontains "-AllowRestrictedUserMode"
}

function ArgForceRelocateImages {
	return $BLFlags -icontains "-ForceRelocateImages"
}

function GetDesiredForceRelocateImages {
	if (ArgForceRelocateImages)
		{ return "ON" }
	else
		{ return "OFF" }
}

function GetDesiredForceRelocateImagesDescription {
	if (ArgForceRelocateImages)
		{ return "Mandatory ASLR: force randomization for images" }
	else
		{ return "Mandatory ASLR: don't force randomization for images" }
}

function ArgNoAutoRebootWithLoggedOnUsers {
	return $BLFlags -icontains "-NoAutoRebootWithLoggedOnUsers"
}

function ArgIgnoreReputationCriterion {
	return $BLFlags -icontains "-IgnoreReputationCriterion"
}

function GetDesiredReputationCriterion {
	if (! (ArgIgnoreReputationCriterion))
		{ return 2 }
	else
		{ return 0 }
}

function GetDesiredReputationCriterionDescription {
	if (! (ArgIgnoreReputationCriterion))
		{ return ("Audit executable files upon running unless they " +
			"meet a prevalence, age, or trusted list criterion") }
	else
		{ return ("Allow executable files to run regardless of whether they " +
			"meet a prevalence, age, or trusted list criterion") }
}

function ArgHighPlusBlockingLevel {
	return $BLFlags -icontains "-HighPlusBlockingLevel"
}

function GetDesiredBlockingLevel {
	if (ArgHighPlusBlockingLevel)
		{ return 4 }
	else
		{ return 2 }
}

function InitDTBL91 {
	for ($i = 0; $i -lt 128; ++$i)
		{ $DTBL91[$i] = 255 }
	for ($i = 0; $i -lt 91; ++$i)
		{ $DTBL91[$ETBL91[$i]] = $i }
}

function RunDecodeBase91($inlet) {
	$ibuf = 0
	$ifill = 0
	$obuf = 0
	$ofill = 0

	function put2() {
		[byte]($obuf -band 0xFF)
		[byte](($obuf -shr 8) -band 0xFF)
	}

	for ($i = 0; $i -lt $inlet.Length; ++$i) {
		$ival = $DTBL91[$inlet[$i]]
		if ($ival -eq 255)
			{ continue }
		$ibuf = $ibuf -bor ([int]$ival -shl $ifill)
		$ifill += 8

		if ($ifill -eq 16) {
			$ch1 = $ibuf -band 0xFF
			$ch2 = ($ibuf -shr 8) -band 0xFF
			$ibuf = $ibuf -shr 16
			$ifill -= 16

			$oval = $ch1 + 91*$ch2
			$obuf = $obuf -bor ($oval -shl $ofill)
			$ofill += 13
			if ($ofill -ge 16) {
				put2
				$obuf = $obuf -shr 16
				$ofill -= 16
			}
		}
	}

	if ($ifill -eq 8) {
		$obuf = $obuf -bor ($ibuf -shl $ofill)
		if (($ofill -ge 10) -and ($ofill -le 15))
			{ put2; return }
		elseif (($ofill -ge 2) -and ($ofill -le 7))
			{ [byte]$obuf; return }
	} else {
		if (($ofill -ge 8) -and ($ofill -le 14))
			{ [byte]$obuf; return }
		elseif (($ofill -ge 0) -and ($ofill -le 6))
			{ return }
	}

	throw "DecodeBase91: ifill = $ifill, ofill = $ofill"
}

function DecodeBase91($inlet) { return ToArray (RunDecodeBase91 $inlet) }

function ToArray($list) {
	if ($null -eq $list)
		{ return @() }
	else
		{ return [object[]]$list }
}

function ArrayToSet($list) {
	$set = @{}
	foreach ($e in $list)
		{ $set[$e] = $true }
	return $set
}

function CommaStrToSet($str) {
	return ArrayToSet @($str -split "," | % {$_.Trim()} | ? {$_})
}

function SetToCommaStr($set) {
	return @($set.Keys | % {$_.Trim()} | ? {$_}) -join ","
}

function DeepEqual($a0, $a1, [scriptblock]$equality) {

	if (($null -eq $a0) -and ($null -eq $a1))
		{ return $true }
	if (($null -eq $a0) -or ($null -eq $a1))
		{ return $false }

	if (($a0 -is [valuetype]) -and ($a1 -is [valuetype]))
		{ return (& $equality $a0 $a1) -and (& $equality $a1 $a0) }
	if (($a0 -is [valuetype]) -or ($a1 -is [valuetype]))
		{ return $false }

	if (($a0 -is [array]) -and ($a1 -is [array])) {
		if ($a0.Equals($a1))
			{ return $true }
		if ($a0.Length -ne $a1.Length)
			{ return $false }
		if (($a0 -is [byte[]]) -or ($a1 -is [byte[]])) {
			for ($i = 0; $i -lt $a0.Length; ++$i) {
				if ([byte]$a0[$i] -ne [byte]$a1[$i])
					{ return $false }
			}
			return $true
		}
		for ($i = 0; $i -lt $a0.Length; ++$i) {
			if (!(DeepEqual $a0[$i] $a1[$i] $equality))
				{ return $false }
		}
		return $true
	}
	if (($a0 -is [array]) -or ($a1 -is [array]))
		{ return $false }

	if (($a0 -is [hashtable]) -and ($a1 -is [hashtable])) {
		if ($a0.Equals($a1))
			{ return $true }
		if ($a0.Count -ne $a1.Count)
			{ return $false }
		foreach ($it in $a0.GetEnumerator()) {
			if (!($a1.ContainsKey($it.Key)))
				{ return $false }
			if (!(DeepEqual $it.Value $a1[$it.Key] $equality))
				{ return $false }
		}
		return $true
	}
	if (($a0 -is [hashtable]) -or ($a1 -is [hashtable]))
		{ return $false }

	if ($a0.GetType() -eq $a1.GetType())
		{ return (& $equality $a0 $a1) -and (& $equality $a1 $a0) }
	else
		{ return $false }
}

function Equal($a0, $a1) {
	function equality($a0, $a1) { return $a0 -eq $a1 }
	return DeepEqual $a0 $a1 ${function:equality}
}

function EqualI($a0, $a1) {
	function equality($a0, $a1) { return $a0 -ieq $a1 }
	return DeepEqual $a0 $a1 ${function:equality}
}

function EqualC($a0, $a1) {
	function equality($a0, $a1) { return $a0 -ceq $a1 }
	return DeepEqual $a0 $a1 ${function:equality}
}

function EQ($a0, $a1) { return Equal $a0 $a1 }
function NE($a0, $a1) { return !(Equal $a0 $a1) }

function IEQ($a0, $a1) { return EqualI $a0 $a1 }
function CEQ($a0, $a1) { return EqualC $a0 $a1 }

function GetKind($value) {
	if ($null -eq $value)
		{ return $null }
	else
		{ return $value.GetType() }
}

function EqualKinds($a0, $a1) {
	return (GetKind $a0) -eq (GetKind $a1)
}

function Pick {
	$index = [int]($args[0])
	return $args[1 + $index]
}

function GetElement {
	$current = $args[0]
	for ($i = 1; $i -lt $args.Length; ++$i) {
		if ($null -ne $current)
			{ $current = $current[$args[$i]] }
		else
			{ break }
	}
	return $current
}

function DumpVersion {
	Write-Host "Botherless Security Script Version" $BLVersion
}

function ConfirmWarning {
	DumpVersion
	try {
		Write-Warning -WarningAction "Inquire" (
			"This script can enable certain Windows built-in boot-critical " +
			"security options (WDAC, VBS, HVCI, ELAM, DEP, DSE, etc) which " +
			"in rare cases may render the system unbootable. " +
			"Proceed only if a System Restore Point was recently created! " +
			"(See '-CreateCheckpoint' switch parameter.)")
	} catch
		[System.Management.Automation.ParentContainsErrorRecordException]
		{ exit 1 }
}

function DumpReport($code, $info, $indent = 0) {
	for ($i = 0; $i -lt $indent; ++$i)
		{ Write-Host " " -NoNewline }
	Write-Host "[" -NoNewline
	switch ($code) {
		0 { Write-Host "+" -NoNewline}
		1 { Write-Host "+" -NoNewline -ForegroundColor Green }
		2 { Write-Host "X" -NoNewline -ForegroundColor Red }
		3 { Write-Host "R" -NoNewline -ForegroundColor Red }
		4 { Write-Host "W" -NoNewline -ForegroundColor Red }
		default { Write-Host "?" -NoNewline -ForegroundColor Yellow `
			-BackgroundColor Magenta }
	}
	Write-Host "] $info"
}

function ReportToInt($report) {
	if (EQ $VOID $report)
		{ return 0 }
	if (EQ $true $report)
		{ return 1 }
	if (EQ $false $report)
		{ return 2 }
	if (EQ $ERRGET $report)
		{ return 3 }
	if (EQ $ERRSET $report)
		{ return 4 }
	return 5
}

function PCCheck($report) {
	if (EQ $true $report)
		{ return $VOID }
	if (EQ $false $report)
		{ return $false }
	return $ERRGET
}

function CompoundReport($report, $dv, $gv, $uv, [scriptblock]$eq) {
	if ($null -eq $uv)
		{ return Pick (& $eq $dv $gv) $report $VOID }
	else {
		if (& $eq $dv $uv)
			{ return Pick (& $eq $dv $gv) $true $VOID }
		else
			{ return $report }
	}
}

function Report($report, $info) {
	DumpReport -code (ReportToInt $report) -info $info
}

function ReportMulti($info, $reports) {
	if (!($reports -is [array])) {
		Report $reports $info
		return
	}
	$root = 0
	foreach ($report in $reports) {
		$code = ReportToInt $report[0]
		if ($code -gt $root)
			{ $root = $code }
	}
	DumpReport -code $root -info $info
	if ($root -gt 0) {
		foreach ($report in $reports) {
			$code = ReportToInt $report[0]
			DumpReport -code $code -info $report[1] -indent 2
		}
	}
}

function HasSecureBoot {
	return $DGStatus.AvailableSecurityProperties -contains 2
}

function HasDMAProtection {
	return $DGStatus.AvailableSecurityProperties -contains 3
}

function HasSecureBootWithDMA {
	return (HasSecureBoot) -and (HasDMAProtection)
}

function HasHypervisor {
	return $DGStatus.AvailableSecurityProperties -contains 1
}

function HasMBEC {
	return $DGStatus.AvailableSecurityProperties -contains 7
}

function HasHVCI {
	return (HasHypervisor) -and ((HasMBEC) -or (ArgAllowRestrictedUserMode))
}

function ConfirmSecureBoot {
	try {
		return EQ (Confirm-SecureBootUEFI) $true
	} catch
		[System.UnauthorizedAccessException]
		{ }
	return $VOID
}

function ConfirmConstrainedMode {
	$langmode = PowerShell -Command ("& { @( " +
		"`$Host.Runspace.LanguageMode, " +
		"`$ExecutionContext.SessionState.LanguageMode " +
	") }")
	return ($langmode -is [array]) -and ($langmode.Length -eq 2) `
		-and ("ConstrainedLanguage" -ieq $langmode[0]) `
		-and ("ConstrainedLanguage" -ieq $langmode[1])
}

function ConfirmLOLBinsBlocked {
	$wmic = "$env:windir\System32\wbem\WMIC.exe"
	try {
		$null = & $wmic "/?"
		if ($?)
			{ return $false }
	} catch
		[System.Management.Automation.ApplicationFailedException]
		{ return $true }
	return $VOID
}

function GetBinaryContent($path) {
	return Get-Content -Path $path -Raw -Encoding "Byte"
}

function SetBinaryContent($path, $value) {
	Set-Content -Path $path -Force -Value $value -Encoding "Byte"
}

function ReadIniFile($path) {
	$lines = Get-Content -Path $path
	$ini = @{}
	$section = $null
	switch -Regex ($lines)
	{
		'^\s*(.+?)\s*=(.*)$'
		{
			if ($null -eq $section)
				{ return $null }
			$name, $value = $Matches[1..2]
			$ini[$section][$name] = $value
			continue
		}
		'^\s*\[(.+)\]\s*$'
		{
			$section = $Matches[1]
			if (!($ini.ContainsKey($section)))
				{ $ini[$section] = @{} }
			continue
		}
		'^\s*;.*$'
			{ continue }
		default
			{ return $null }
	}
	return $ini
}

function WriteIniFile($ini, $path) {
	$content = @()
	foreach ($i in $ini.Keys | sort) {
		$content += "[$i]"
		foreach ($j in $ini[$i].Keys | sort)
			{ $content += "$j=$($ini[$i][$j])" }
	}
	Set-Content -Path $path -Value $content
}

function DecodeWDACPolicy($encoded) {

	$tmpdir = (New-TemporaryFile).FullName + "." +
		(Get-Random -Minimum 100 -Maximum 1000)
	$null = New-Item -ItemType "Directory" -Path $tmpdir
	$binary = $tmpdir + "\SIPolicy.p7b"
	$zipfile = (New-TemporaryFile).FullName + ".zip"

	$zipped = DecodeBase91 $encoded

	SetBinaryContent -path $zipfile -value $zipped

	Expand-Archive -Path $zipfile -DestinationPath $tmpdir
	$policy = GetBinaryContent -path $binary

	return $policy
}

function FetchDGStatus {
	$script:DGStatus = Get-CimInstance -ClassName "Win32_DeviceGuard" `
		-Namespace "root\Microsoft\Windows\DeviceGuard"
}

function GetDefaultAdministrator {
	return Get-CimInstance -ClassName "Win32_UserAccount" `
		-Filter "LocalAccount = 'True' AND SID LIKE 'S-1-5-%-500'"
}

function ConfigureRegistry($item, $property, $type, $value) {

	function getter {
		try {
			$got = (Get-ItemProperty -Path $item -Name $property).$property
		} catch
			[System.Management.Automation.ItemNotFoundException],
			[System.Management.Automation.PSArgumentException]
			{ $got = $VOID }
		return $got
	}

	$got = getter

	if ((CEQ $got $value) -and (EqualKinds $got $value))
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return $false }

	try {
		if (NE $value $VOID) {
			if (!(Test-Path $item))
				{ $null = New-Item $item -Force }
			Set-ItemProperty -Path $item -Name $property `
				-Type $type -Value $value
		} else
			{ Remove-ItemProperty -Path $item -Name $property }
	} catch
		[System.Security.SecurityException],
		[System.UnauthorizedAccessException]
		{ return $ERRSET }

	$got = getter

	return (CEQ $got $value) -and (EqualKinds $got $value)
}

function ConfigureRegistryMulti($entries) {

	$outcome = $null
	$outCode = -1

	foreach ($entry in $entries) {
		$report = ConfigureRegistry @entry
		$code = ReportToInt $report
		if ($code -gt $outCode) {
			$outcome = $report
			$outCode = $code
		}
	}

	return $outcome
}

function ConfigureSecurityPolicy($conf) {

	$desired = @{}
	foreach ($i in $conf.GetEnumerator()) {
		$desired[$i.Key] = @{}
		foreach ($j in $i.Value.GetEnumerator())
			{ $desired[$i.Key][$j.Key] = $j.Value[0] }
	}

	$secedit = "$env:windir\System32\SecEdit.exe"

	function getter {
		$temp = (New-TemporaryFile).FullName

		& $secedit "/export" "/areas" "SECURITYPOLICY" "USER_RIGHTS" `
			"/cfg" $temp > $null
		if (! $?)
			{ return $ERRGET }

		$complete = ReadIniFile -path $temp
		if ($null -eq $complete)
			{ return $ERRGET }

		$relevant = @{}
		foreach ($i in $conf.GetEnumerator()) {
			$relevant[$i.Key] = @{}
			foreach ($j in $i.Value.GetEnumerator()) {
				if ($complete.ContainsKey($i.Key) `
					-and $complete[$i.Key].ContainsKey($j.Key))
				{
					$relevant[$i.Key][$j.Key] =
						& ($j.Value[1]) $complete[$i.Key][$j.Key]
				} else
					{ $relevant[$i.Key][$j.Key] = & ($j.Value[1]) "" }
			}
		}
		return $relevant
	}

	function report($report, $got, $updated) {
		$reports = @()
		foreach ($i in $conf.GetEnumerator()) {
			foreach ($j in $i.Value.GetEnumerator()) {
				$dv = $j.Value[0]
				$gv = $got[$i.Key][$j.Key]
				$uv = GetElement $updated $i.Key $j.Key
				$cr = CompoundReport $report $dv $gv $uv ${function:CEQ}
				$reports += @(, @($cr, $j.Value[3], $j.Value[4]))
			}
		}
		return $reports | sort @{e = {$_[2]}}
	}

	$got = getter

	if (EQ $got $ERRGET)
		{ return $ERRGET }
	elseif (CEQ $got $desired)
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return report $false $got $null }

	$ini = @{}
	foreach ($i in $conf.GetEnumerator()) {
		$ini[$i.Key] = @{}
		foreach ($j in $i.Value.GetEnumerator())
			{ $ini[$i.Key][$j.Key] = & ($j.Value[2]) $j.Value[0] }
	}
	$ini["Unicode"] = @{"Unicode" = "yes"}
	$ini["Version"] = @{"Signature" = "`"`$CHICAGO`$`""; "Revision" = "1"}
	$tempIni = (New-TemporaryFile).FullName
	$tempSdb = (New-TemporaryFile).FullName + "." +
		(Get-Random -Minimum 100 -Maximum 1000)
	WriteIniFile -ini $ini -path $tempIni

	& $secedit "/configure" "/areas" "SECURITYPOLICY" "USER_RIGHTS" `
		"/cfg" $tempIni "/db" $tempSdb "/quiet" > $null
	if (! $?)
		{ return report $ERRSET $got (getter) }

	return report $false $got (getter)
}

function ConfigureMpPreference($preference, $value) {

	function getter {
		$got = Get-MpPreference | Select-Object -ExpandProperty $preference
		return $got
	}

	$got = getter

	if (CEQ $got $value)
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return $false }

	try {
		$parameters = @{ $preference = $value }
		Set-MpPreference -ErrorAction "Stop" @parameters
	} catch
		[Microsoft.Management.Infrastructure.CimException]
		{ return $ERRSET }

	$got = getter

	return CEQ $got $value
}

function ConfigureASRRules($rules) {

	$desired = @{}
	foreach ($i in $rules.GetEnumerator())
		{ $desired[$i.Key] = $i.Value[0] }

	function getter {
		$prefs = Get-MpPreference
		$ids = $prefs.AttackSurfaceReductionRules_Ids
		$actions = $prefs.AttackSurfaceReductionRules_Actions
		$isarray = ($ids -is [array]) -and ($actions -is [array])
		$got = @{}
		if ($isarray -and ($ids.Length -eq $actions.Length)) {
			for ($i = 0; $i -lt $ids.Length; ++$i)
				{ $got[$ids[$i]] = $actions[$i] }
		}
		return $got
	}

	function report($report, $got, $updated) {
		$reports = @()
		foreach ($i in $rules.GetEnumerator()) {
			$dv = $i.Value[0]
			$gv = $got[$i.Key]
			$uv = GetElement $updated $i.Key
			$cr = CompoundReport $report $dv $gv $uv ${function:EQ}
			$reports += @(, @($cr, $i.Value[1], $i.Value[2]))
		}
		return $reports | sort @{e = {$_[2]}}
	}

	$got = getter
	foreach ($i in $got.GetEnumerator()) {
		if (! $desired.ContainsKey($i.Key))
			{ $desired[$i.Key] = $i.Value }
	}

	if (EQ $got $desired)
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return report $false $got $null }

	try {
		Set-MpPreference -ErrorAction "Stop" `
			-AttackSurfaceReductionRules_Ids $desired.Keys `
			-AttackSurfaceReductionRules_Actions $desired.Values
	} catch
		[Microsoft.Management.Infrastructure.CimException]
		{ return report $ERRSET $got (getter) }

	return report $false $got (getter)
}

function ConfigureExploitMitigations($conf) {

	$desired = @{
		"DEP.Enable" = "ON"
		"DEP.EmulateAtlThunks" = "OFF"
		"ASLR.ForceRelocateImages" = GetDesiredForceRelocateImages
		"ASLR.RequireInfo" = "OFF"
		"ASLR.BottomUp" = "ON"
		"ASLR.HighEntropy" = "ON"
		"CFG.Enable" = "ON"
		"CFG.SuppressExports" = "OFF"
		"CFG.StrictControlFlowGuard" = "OFF"
		"SEHOP.Enable" = "ON"
		"SEHOP.TelemetryOnly" = "OFF"
		"Heap.TerminateOnError" = "ON"
	}

	foreach ($i in $conf.GetEnumerator()) {
		if($desired.ContainsKey($i.Key))
			{ $desired[$i.Key] = $i.Value[0] }
		else
			{ throw "ConfigureExploitMitigations: $($i.Key) is unknown" }
	}

	function getter {
		$obj = Get-ProcessMitigation -System
		return @{
			"DEP.Enable" = [string]$obj.DEP.Enable
			"DEP.EmulateAtlThunks" = [string]$obj.DEP.EmulateAtlThunks
			"ASLR.ForceRelocateImages" = [string]$obj.ASLR.ForceRelocateImages
			"ASLR.RequireInfo" = [string]$obj.ASLR.RequireInfo
			"ASLR.BottomUp" = [string]$obj.ASLR.BottomUp
			"ASLR.HighEntropy" = [string]$obj.ASLR.HighEntropy
			"CFG.Enable" = [string]$obj.CFG.Enable
			"CFG.SuppressExports" = [string]$obj.CFG.SuppressExports
			"CFG.StrictControlFlowGuard" =
				[string]$obj.CFG.StrictControlFlowGuard
			"SEHOP.Enable" = [string]$obj.SEHOP.Enable
			"SEHOP.TelemetryOnly" = [string]$obj.SEHOP.TelemetryOnly
			"Heap.TerminateOnError" = [string]$obj.Heap.TerminateOnError
		}
	}

	function report($report, $got, $updated) {
		$reports = @()
		foreach ($i in $conf.GetEnumerator()) {
			if(! $desired.ContainsKey($i.Key))
				{ continue }
			$dv = $desired[$i.Key]
			$gv = $got[$i.Key]
			$uv = GetElement $updated $i.Key
			$cr = CompoundReport $report $dv $gv $uv ${function:IEQ}
			$reports += @(, @($cr, $i.Value[1], $i.Value[2]))
		}
		return $reports | sort @{e = {$_[2]}}
	}

	$got = getter

	if (IEQ $got $desired)
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return report $false $got $null }

	$tags = @{
		"DEP.Enable" = "DEP"
		"DEP.EmulateAtlThunks" = "EmulateAtlThunks"
		"ASLR.ForceRelocateImages" = "ForceRelocateImages"
		"ASLR.RequireInfo" = "RequireInfo"
		"ASLR.BottomUp" = "BottomUp"
		"ASLR.HighEntropy" = "HighEntropy"
		"CFG.Enable" = "CFG"
		"CFG.SuppressExports" = "SuppressExports"
		"CFG.StrictControlFlowGuard" = "StrictCFG"
		"SEHOP.Enable" = "SEHOP"
		"SEHOP.TelemetryOnly" = "SEHOPTelemetry"
		"Heap.TerminateOnError" = "TerminateOnError"
	}

	$E = @()
	$D = @()
	foreach ($i in $tags.GetEnumerator()) {
		if ($desired[$i.Key] -ine "OFF")
			{ $E += $i.Value }
		else
			{ $D += $i.Value }
	}
	$parameters = @{ "Force" = "off" }
	if ($E.Length -ne 0)
		{ $parameters["Enable"] = $E }
	if ($D.Length -ne 0)
		{ $parameters["Disable"] = $D }
	try {
		Set-ProcessMitigation -System -WarningAction "Stop" @parameters *> $null
	} catch
		[System.Management.Automation.ParentContainsErrorRecordException]
		{ return report $ERRSET $got (getter) }

	return report $false $got (getter)
}

function ConfigureBootOption($option, $value) {

	$bcdedit = "$env:windir\System32\bcdedit.exe"

	function getter {
		$pattern = '^' + [regex]::escape($option) + '\s+(\w+)$'
		$out = & $bcdedit "/enum" "{current}"
		if (! $?)
			{ return $ERRGET }
		$info = $out | Select-String -Pattern $pattern
		if (($null -ne $info) -and ($info.Matches.Length -eq 1))
			{ return $info.Matches[0].Groups[1].Value }
		return $VOID
	}

	$got = getter

	if (EQ $got $ERRGET)
		{ return $ERRGET }
	elseif (IEQ $got $value)
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return $false }

	if (EQ $value $VOID)
		{ & $bcdedit "/deletevalue" "{current}" $option > $null }
	else
		{ & $bcdedit "/set" "{current}" $option $value > $null }
	if (! $?)
		{ return $ERRSET }

	$got = getter

	return IEQ $got $value
}

function ConfigurePowerShellPolicy($value) {

	function getter {
		$got = [string](Get-ExecutionPolicy -Scope "LocalMachine")
		return $got
	}

	$got = getter

	if (IEQ $got $value)
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return $false }

	try {
		Set-ExecutionPolicy -ExecutionPolicy $value -Scope "LocalMachine" -Force
	} catch
		[System.UnauthorizedAccessException]
		{ return $ERRSET }

	$got = getter

	return IEQ $got $value
}

function ConfigureService($name, $startup, $state) {

	$conf = @{"startup" = $startup; "state" = $state }

	function getter {
		$service = Get-Service -Name $name
		$got = @{ "startup" = [string]$service.StartType }
		if ($null -eq $state)
			{ $got["state"] = $null }
		else
			{ $got["state"] = [string]$service.Status }
		return $got
	}

	$got = getter

	if (IEQ $got $conf)
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return $false }

	try {
		if ($null -eq $state)
			{ Set-Service -Name $name -StartupType $startup }
		else
			{ Set-Service -Name $name -StartupType $startup -Status $state }
	} catch
		[Microsoft.PowerShell.Commands.ServiceCommandException]
		{ return $ERRSET }

	$got = getter

	return IEQ $got $conf
}

function ConfigureWDAC() {

	$wdac = "$env:windir\System32\CodeIntegrity\SIPolicy.p7b"
	$multi = "$env:windir\System32\CodeIntegrity\CiPolicies\Active"
	$policy = DecodeWDACPolicy $EncodedWDACPolicy
	$desired = @{ "policy" = $policy; "running" = $true }

	function getter {
		try {
			$running =
				(EQ $DGStatus.CodeIntegrityPolicyEnforcementStatus 2) -and `
				(EQ $DGStatus.UsermodeCodeIntegrityPolicyEnforcementStatus 2)
			try {
				if (@(Get-ChildItem -Path $multi).Count -ne 0)
					{ return @{ "policy" = $VOID; "running" = $running } }
			} catch
				[System.Management.Automation.ItemNotFoundException]
				{ }
			try {
				return @{ "policy" = (GetBinaryContent -path $wdac)
					"running" = $running }
			} catch
				[System.Management.Automation.ItemNotFoundException]
				{ return @{ "policy" = $VOID; "running" = $running } }
		} catch
			[System.UnauthorizedAccessException]
			{ return $ERRGET }
	}

	function report($report, $got, $updated) {
		$rWrite = CompoundReport $report $policy $got["policy"] `
			(GetElement $updated "policy") ${function:EQ}
		$rStart = CompoundReport $report $true $got["running"] `
			(GetElement $updated "running") ${function:EQ}
		return @(
			@($rWrite, "Install WDAC policy binary file"),
			@($rStart, "Start WDAC or update its policy without reboot")
		)
	}

	$got = getter

	if (EQ $got $ERRGET)
		{ return $ERRGET }
	elseif (EQ $got $desired)
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return report $false $got $null }

	try {
		Remove-Item -Path "$multi\*" -Force -Recurse
		SetBinaryContent -path $wdac -value $policy
		$rval = Invoke-CimMethod -Namespace "root\Microsoft\Windows\CI" `
			-ClassName "PS_UpdateAndCompareCIPolicy" -MethodName "Update" `
			-Arguments @{ "FilePath" = $wdac }
		if (0 -ne $rval.ReturnValue)
			{ return report $ERRSET $got (getter) }
	} catch
		[System.Management.Automation.ItemNotFoundException],
		[System.UnauthorizedAccessException],
		[Microsoft.Management.Infrastructure.CimException]
		{ return report $ERRSET $got (getter) }

	FetchDGStatus

	return report $false $got (getter)
}

function ConfigureOptionalFeature($feature, $value) {

	function getter {
		try {
			$obj = Get-WindowsOptionalFeature -Online -FeatureName $feature
			if ($null -ne $obj) {
				$state = [string]$obj.State
				if ($state -ieq "Disabled")
					{ return $false }
				elseif ($state -ieq "Enabled")
					{ return $true }
			}
		} catch
			[System.Runtime.InteropServices.COMException]
			{ }
		return $ERRGET
	}

	$got = getter

	if (EQ $got $ERRGET)
		{ return $ERRGET }
	elseif (EQ $got $value)
		{ return $VOID }
	elseif (!(ArgTackle))
		{ return $false }

	try {
		$parameters = @{"Online" = $true; "FeatureName" = $feature
			"NoRestart" = $true; "WarningAction" = "SilentlyContinue"}
		if ($value)
			{ $null = Enable-WindowsOptionalFeature @parameters }
		else
			{ $null = Disable-WindowsOptionalFeature @parameters }
	} catch
		[System.Runtime.InteropServices.COMException]
		{ return $ERRSET }

	$got = getter

	return EQ $got $value
}

function ConfigureAll {

	InitDTBL91

	$allFlags = @{
		"-CreateCheckpoint" = ""
		"-Tackle" = ""
		"-NoIntroWarning" = ""
		"-AllowRestrictedUserMode" = ""
		"-ForceRelocateImages" = ""
		"-NoAutoRebootWithLoggedOnUsers" = ""
		"-IgnoreReputationCriterion" = ""
		"-HighPlusBlockingLevel" = ""
	}

	$local:BLFlags = @($env:BOTHERLESS_ARGS -split " " | % {$_.Trim()} | ? {$_})

	foreach ($flag in $BLFlags) {
		if (!$allFlags.ContainsKey($flag)) {
			Write-Host "Bad parameter $flag"
			exit 1
		}
	}

	$osInfo = Get-CimInstance -ClassName "Win32_OperatingSystem"

	if (([int]$osInfo.BuildNumber -lt 19041) -or ([intptr]::Size -lt 8)) {
		Write-Host "At least 20H1 version of 64-bit Windows is required"
		exit 1
	}

	if (ArgCreateCheckpoint) {
		if ($BLFlags.Length -ne 1) {
			Write-Host "Bad parameters"
			exit 1
		}
		try {
			Enable-ComputerRestore -Drive $osInfo.SystemDrive
			Checkpoint-Computer -Description "Botherless Checkpoint" `
				-RestorePointType "MODIFY_SETTINGS" -WarningAction "Stop"
			@((Get-ComputerRestorePoint))[-1]
			exit 0
		}
		catch
			[System.Management.ManagementException]
		{
			$msg = ([string]$_).Trim()
			Write-Warning "A System Restore Point was not created. ($msg)"
		}
		catch
			[System.Management.Automation.ParentContainsErrorRecordException]
			{ }
		exit 1
	}

	if ((ArgTackle) -and !(ArgNoIntroWarning))
		{ ConfirmWarning }

	FetchDGStatus

	ReportMulti "Configure and run Windows Defender Application Control" `
		(ConfigureWDAC)

	$reports = @(
		@((ConfigureBootOption -option "recoveryenabled" -value "Yes"),
			"Enable Windows Recovery Environment"),
		@((ConfigureBootOption -option "bootstatuspolicy" -value $VOID),
			"Set Recovery Environment trigger to its default configuration"),
		@((ConfigureBootOption -option "nx" -value "AlwaysOn"),
			"Enable DEP for the operating system and all processes")
	)

	if (!(HasSecureBoot)) {
		$reports += @(, @((ConfigureBootOption -option "testsigning" `
			-value $VOID), "Disable test-signed kernel-mode drivers"))
		$reports += @(, @((ConfigureBootOption -option "nointegritychecks" `
			-value $VOID), "Enable Driver Signature Enforcement"))
	}

	ReportMulti "Configure security-related boot time settings" $reports

	if (HasHypervisor) {
		$reports = @(
			@((ConfigureBootOption -option "hypervisorlaunchtype" `
				-value $VOID), "Enable VBS boot option"),
			@((ConfigureRegistry -item `
				"HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" `
				-property "EnableVirtualizationBasedSecurity" `
				-type "DWord" -value 1), "Enable VBS registry option")
		)
		if (HasSecureBootWithDMA) {
			$reports += @(, @((ConfigureRegistry -item `
				"HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" `
				-property "RequirePlatformSecurityFeatures" `
				-type "DWord" -value 1), "Require Secure Boot with DMA"))
		} elseif (HasSecureBoot) {
			$reports += @(, @((ConfigureRegistry -item `
				"HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" `
				-property "RequirePlatformSecurityFeatures" `
				-type "DWord" -value 3), "Require Secure Boot"))
		}
		ReportMulti "Enable Virtualization Based Security" $reports
	}

	if (HasHVCI) {
		Report (ConfigureRegistry -item (
			"HKLM:\SYSTEM\CurrentControlSet\Control\" +
				"DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity") `
			-property "Enabled" -type "DWord" -value 1) `
			"Enable hypervisor-assisted protection of Code Integrity policies"
	}

	ReportMulti "Disable deprecated Windows components" @(
		@((ConfigureOptionalFeature -feature "SMB1Protocol" -value $false),
			"Disable SMB 1.0/CIFS File Sharing Support"),
		@((ConfigureOptionalFeature `
			-feature "MicrosoftWindowsPowerShellV2Root" -value $false),
			"Disable Windows PowerShell 2.0")
	)

	ReportMulti "Restrict Windows scripting environment" @(
		@((ConfigurePowerShellPolicy -value "Restricted"),
			"(1/2) Restrict PowerShell execution policy"),
		@((ConfigureRegistryMulti @(
			@{"item" = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell"
				"property" = "ExecutionPolicy"; "type" = "String"; "value" =
				"Restricted"},
			@{"item" = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\PowerShell"
				"property" = "EnableScripts"; "type" = "DWord"; "value" = 0})),
			"(2/2) Restrict PowerShell execution policy"),
		@((ConfigureRegistryMulti @(
			@{"item" = "HKLM:\SOFTWARE\Microsoft\Windows Script Host\Settings"
				"property" = "Enabled"; "type" = "DWord"; "value" = 0},
			@{"item" = ("HKLM:\SOFTWARE\" +
				"WOW6432Node\Microsoft\Windows Script Host\Settings")
				"property" = "Enabled"; "type" = "DWord"; "value" = 0})),
			"Disable Windows Script Host")
	)

	Report (ConfigureRegistry -item ("HKLM:\SYSTEM\CurrentControlSet\" +
			"Control\Session Manager\Environment") `
		-property "MP_FORCE_USE_SANDBOX" -type "String" -value "1") `
		"Run Windows Defender in a sandbox"

	Report (ConfigureRegistry -item `
		"HKLM:\SYSTEM\CurrentControlSet\Policies\EarlyLaunch" `
		-property "DriverLoadPolicy" -type "DWord" -value 1) `
		"Run Early Launch AntiMalware"

	$O = 0
	ReportMulti "Enable Attack surface reduction rules" (ConfigureASRRules `
			-rules @{
		"56A863A9-875E-4185-98A7-B882C64B5CE5" = @(1,
			("Block abuse of exploited vulnerable signed drivers"), ++$O)
		"7674BA52-37EB-4A4F-A9A1-F0F9A1619A2C" = @(1,
			("Block Adobe Reader from creating child processes"), ++$O)
		"D4F940AB-401B-4EFC-AADC-AD5F3C50688A" = @(1,
			("Block all Office applications from creating child processes"),
			++$O)
		"9E6C4E1F-7D60-472F-BA1A-A39EF669E4B2" = @(1,
			("Block credential stealing from the Windows " +
			"local security authority subsystem (lsass.exe)"), ++$O)
		"BE9BA2D9-53EA-4CDC-84E5-9B1EEEE46550" = @(1,
			("Block executable content from email client and webmail"), ++$O)
		"01443614-CD74-433A-B99E-2ECDC07BFC25" = @(
			(GetDesiredReputationCriterion),
			(GetDesiredReputationCriterionDescription), ++$O)
		"5BEB7EFE-FD9A-4556-801D-275E5FFC04CC" = @(1,
			("Block execution of potentially obfuscated scripts"), ++$O)
		"D3E037E1-3EB8-44C8-A917-57927947596D" = @(1,
			("Block JavaScript or VBScript from launching " +
			"downloaded executable content"), ++$O)
		"3B576869-A4EC-4529-8536-B80A7769E899" = @(1,
			("Block Office applications from creating executable content"),
			++$O)
		"75668C1F-73B5-4CF0-BB93-3ECF5CB7CC84" = @(1,
			("Block Office applications from injecting code " +
			"into other processes"), ++$O)
		"26190899-1602-49E8-8B27-EB1D0A1CE869" = @(1,
			("Block Office communication application from " +
			"creating child processes"), ++$O)
		"E6DB77E5-3DF2-4CF1-B95A-636979351E5B" = @(1,
			("Block persistence through WMI event subscription"), ++$O)
		"D1E49AAC-8F56-4280-B9BA-993A6D77406C" = @(1,
			("Block process creations originating from " +
			"PSExec and WMI commands"), ++$O)
		"B2B3F03D-6A65-4F7B-A9C7-1C7EF74A9BA4" = @(1,
			("Block untrusted and unsigned processes that run from USB"), ++$O)
		"92E97FA1-2EDF-4476-BDD6-9DD0B4DDDC7B" = @(1,
			("Block Win32 API calls from Office macros"), ++$O)
		"C1DB55AB-C21A-4637-BB3F-A12568109D35" = @(1,
			("Use advanced protection against ransomware"), ++$O)
	})

	ReportMulti "Configure Windows Defender preferences" @(
		@((ConfigureMpPreference -preference "DisableRealtimeMonitoring" `
			-value $false), "Turn on real-time protection"),
		@((ConfigureMpPreference -preference "DisableBehaviorMonitoring" `
			-value $false), "Turn on behavior monitoring"),
		@((ConfigureMpPreference -preference "DisableIOAVProtection" `
			-value $false), "Scan all downloaded files and attachments"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Policies\Microsoft\" +
				"Windows Defender\Real-Time Protection") `
			-property "DisableOnAccessProtection" -value $VOID),
			"Monitor file and program activity"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Policies\Microsoft\" +
				"Windows Defender\Real-Time Protection") `
			-property "DisableRawWriteNotification" -value $VOID),
			"Turn on raw volume write notifications"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Policies\Microsoft\" +
				"Windows Defender\Real-Time Protection") `
			-property "DisableScanOnRealtimeEnable" -value $VOID), (
			"Turn on process scanning whenever " +
				"real-time protection is enabled")),
		@((ConfigureMpPreference -preference "RealTimeScanDirection" `
			-value 0), ("Configure monitoring for " +
				"incoming and outgoing file and program activity")),
		@((ConfigureMpPreference -preference "PUAProtection" -value 1),
			"Detect and block potentially unwanted applications"),
		@((ConfigureMpPreference -preference "DisableScriptScanning" `
			-value $false), "Enable script scanning"),
		@((ConfigureMpPreference -preference "ScanAvgCPULoadFactor" -value 50),
			"Limit maximum CPU load during a scan"),
		@((ConfigureMpPreference -preference "MAPSReporting" -value 2),
			"Enable Microsoft Active Protection Service"),
		@((ConfigureMpPreference -preference "SubmitSamplesConsent" -value 1),
			"Enable automatic sample submission"),
		@((ConfigureMpPreference -preference "CloudBlockLevel" `
			-value (GetDesiredBlockingLevel)),
			"Enable cloud-delivered protection"),
		@((ConfigureMpPreference -preference "DisableBlockAtFirstSeen" `
			-value $false), "Block at first sight"),
		@((ConfigureMpPreference -preference "CloudExtendedTimeout" `
			-value 50), "Enable extended cloud check"),
		@((ConfigureMpPreference -preference "EnableNetworkProtection" `
			-value 1), "Enable Windows Defender Network Protection")
	)

	$O = 0
	ReportMulti "Enable exploit mitigations" (ConfigureExploitMitigations `
			-conf @{
		"DEP.Enable" = @("ON",
			"DEP: enable Data Execution Prevention", ++$O)
		"DEP.EmulateAtlThunks" = @("OFF",
			"DEP: disable ATL Thunk emulation", ++$O)
		"ASLR.ForceRelocateImages" = @((GetDesiredForceRelocateImages),
			(GetDesiredForceRelocateImagesDescription), ++$O)
		"ASLR.RequireInfo" = @("OFF",
			"Mandatory ASLR: don't require relocation information", ++$O)
		"ASLR.BottomUp" = @("ON",
			"Bottom-up ASLR: randomize memory allocations", ++$O)
		"ASLR.HighEntropy" = @("ON",
			"Bottom-up ASLR: use high entropy", ++$O)
		"CFG.Enable" = @("ON",
			"CFG: enable Control Flow Guard", ++$O)
		"CFG.SuppressExports" = @("OFF",
			"CFG: disable export suppression", ++$O)
		"CFG.StrictControlFlowGuard" = @("OFF",
			"CFG: disable strict mode", ++$O)
		"SEHOP.Enable" = @("ON",
			"SEHOP: validate exception chains", ++$O)
		"SEHOP.TelemetryOnly" = @("OFF",
			"SEHOP: disable telemetry-only mode", ++$O)
		"Heap.TerminateOnError" = @("ON",
			"Heap: validate heap integrity", ++$O)
	})

	ReportMulti "Configure Windows SmartScreen" @(
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" `
			-property "EnableSmartScreen" -type "DWord" -value 1),
			"Enable Windows SmartScreen"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows\System" `
			-property "ShellSmartScreenLevel" -type "String" -value "Warn"),
			"Warn the user that the app appears suspicious"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" `
			-property "SmartScreenEnabled" -type "String" -value "Prompt"),
			"Warn before running an unrecognized app")
	)

	$O = 0
	ReportMulti "Refine Local Security Policy" (ConfigureSecurityPolicy @{
		"Privilege Rights" = @{
			"SeDebugPrivilege" = @((ArrayToSet @(
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Disable the possibility to debug arbitrary processes"), ++$O)
			"SeLockMemoryPrivilege" = @((ArrayToSet @(
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Disallow any account to lock pages in memory"), ++$O)
			"SeTcbPrivilege" = @((ArrayToSet @(
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Prohibit accounts from acting as part of the operating " +
				"system"), ++$O)
			"SeEnableDelegationPrivilege" = @((ArrayToSet @(
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Disallow computer and user accounts to be trusted for " +
				"delegation"), ++$O)
			"SeCreateTokenPrivilege" = @((ArrayToSet @(
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Prohibit accounts from creating a token"), ++$O)
			"SeImpersonatePrivilege" = @((ArrayToSet @(
				"*S-1-5-19", "*S-1-5-20", "*S-1-5-32-544", "*S-1-5-6"
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Allow only appropriate accounts to impersonate a client " +
				"after authentication"), ++$O)
			"SeSecurityPrivilege" = @((ArrayToSet @(
				"*S-1-5-32-544"
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Allow only Administrators to manage auditing and " +
				"security log"), ++$O)
			"SeDenyNetworkLogonRight" = @((ArrayToSet @(
				"*S-1-5-7", (GetDefaultAdministrator).Name, "*S-1-5-32-546"
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Deny inappropriate accounts to access this computer " +
				"from the network"), ++$O)
			"SeNetworkLogonRight" = @((ArrayToSet @(
				"*S-1-5-32-544", "*S-1-5-32-545"
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Allow only Users and Administrators to access this " +
				"computer from the network"), ++$O)
			"SeDenyRemoteInteractiveLogonRight" = @((ArrayToSet @(
				"*S-1-5-32-546"
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Deny Guests to log on through Remote Desktop Services"), ++$O)
			"SeRemoteInteractiveLogonRight" = @((ArrayToSet @(
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Allow no one to log on through Remote Desktop Services"),
				++$O)
			"SeDenyInteractiveLogonRight" = @((ArrayToSet @(
				"*S-1-5-32-546"
				)), ${function:CommaStrToSet}, ${function:SetToCommaStr},
				("Deny Guests to log on locally"), ++$O)
		}
	})

	ReportMulti "Block remote access" @(
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Policies\Microsoft\" +
				"Windows NT\Terminal Services") `
			-property "fAllowUnsolicited" -type "DWord" -value 0),
			"Prevent unsolicited remote assistance offers"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Policies\Microsoft\" +
				"Windows NT\Terminal Services") `
			-property "fAllowToGetHelp" -type "DWord" -value 0),
			"Disallow solicited remote assistance"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Policies\Microsoft\" +
				"Windows NT\Terminal Services") `
			-property "fDenyTSConnections" -type "DWord" -value 1),
			"Prevent users from connecting to a computer using RDS"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Policies\Microsoft\" +
				"Windows\WinRM\Service\WinRS") `
			-property "AllowRemoteShellAccess" -type "DWord" -value 0),
			"Disallow Remote Shell access"),
		@((ConfigureService -name "RemoteRegistry" -startup "Disabled" `
			-state "Stopped"), "Disable RemoteRegistry service"),
		@((ConfigureService -name "WinRM" -startup "Disabled" `
			-state "Stopped"), "Disable WinRM service")
	)

	ReportMulti "Configure User Account Control" @(
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Microsoft\Windows\" +
				"CurrentVersion\Policies\System") `
			-property "ConsentPromptBehaviorAdmin" -type "DWord" -value 2),
			"Prompt the administrator for consent on the secure desktop"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Microsoft\Windows\" +
				"CurrentVersion\Policies\System") `
			-property "ConsentPromptBehaviorUser" -type "DWord" -value 1),
			"Prompt the user for credentials on the secure desktop"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Microsoft\Windows\" +
				"CurrentVersion\Policies\System") `
			-property "EnableLUA" -type "DWord" -value 1), (
			"Notify the user when programs try to make " +
				"changes to the computer")),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Microsoft\Windows\" +
				"CurrentVersion\Policies\System") `
			-property "EnableVirtualization" -type "DWord" -value 1),
			"Virtualize file and registry write failures to per-user locations")
	)

	ReportMulti "Strengthen potentially vulnerable system options" @(
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager" `
			-property "SafeDLLSearchMode" -type "DWord" -value 1),
			"Enable Safe DLL search mode"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager" `
			-property "ProtectionMode" -type "DWord" -value 1),
			"Strengthen default permissions of internal system objects"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows\Explorer" `
			-property "NoDataExecutionPrevention" -value $VOID),
			"Enable Explorer Data Execution Prevention"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows\Explorer" `
			-property "NoHeapTerminationOnCorruption" -value $VOID),
			"Enable Explorer heap termination on corruption"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Microsoft\Windows\" +
				"CurrentVersion\Policies\Explorer") `
			-property "PreXPSP2ShellProtocolBehavior" -value $VOID),
			"Run Explorer shell protocol in protected mode")
	)

	ReportMulti "Strengthen potentially vulnerable network options" @(
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows\WcmSvc\GroupPolicy" `
			-property "fMinimizeConnections" -value $VOID), (
			"Limit simultaneous connections to the Internet " +
				"or a Windows domain")),
		@((ConfigureService -name "lmhosts" -startup "Disabled"),
			"Disable lmhosts service"),
		@((ConfigureService -name "NetBIOS" -startup "Disabled"),
			"Disable NetBIOS service"),
		@((ConfigureService -name "NetBT" -startup "Disabled"),
			"Disable NetBT service"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient" `
			-property "EnableMulticast" -type "DWord" -value 0),
			"Disable link local multicast name resolution"),
		@((ConfigureRegistryMulti @(
			@{"item" =
				"HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"
				"property" = "DisableIPSourceRouting"; "type" = "DWord"
				"value" = 2},
			@{"item" =
				"HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip6\Parameters"
				"property" = "DisableIPSourceRouting"; "type" = "DWord"
				"value" = 2})),
			"Prevent IPv4/IPv6 source routing"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" `
			-property "EnableICMPRedirect" -type "DWord" -value 0),
			"Disallow ICMP redirects to override OSPF generated routes"),
		@((ConfigureRegistry -item ("HKLM:\SOFTWARE\Microsoft\Windows\" +
				"CurrentVersion\Policies\System\Kerberos\Parameters") `
			-property "SupportedEncryptionTypes" -type "DWord" `
			-value 2147483640), "Prevent the use of DES and RC4 in Kerberos"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Services\Netlogon\Parameters" `
			-property "SealSecureChannel" -type "DWord" -value 1),
			"Outgoing traffic on a secure channel should be encrypted"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Services\Netlogon\Parameters" `
			-property "RequireSignOrSeal" -type "DWord" -value 1), (
			"Outgoing traffic on a secure channel must be " +
				"either signed or sealed")),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" `
			-property "fEncryptRPCTraffic" -type "DWord" -value 1),
			"Require secure RPC communications for Remote Desktop"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" `
			-property "MinEncryptionLevel" -type "DWord" -value 3),
			"Encrypt Remote Desktop Services sessions in both directions"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Services\LanManServer\Parameters" `
			-property "RestrictNullSessAccess" -type "DWord" -value 1),
			"Restrict anonymous access to named pipes and shares"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" `
			-property "RestrictAnonymousSAM" -type "DWord" -value 1),
			"Disallow anonymous enumeration of SAM accounts"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" `
			-property "RestrictAnonymous" -type "DWord" -value 1),
			"Restrict anonymous enumeration of shares"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" `
			-property "EveryoneIncludesAnonymous" -type "DWord" -value 0), (
			"Prevent anonymous users from having the same rights " +
				"as the Everyone group")),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" `
			-property "RestrictRemoteSAM" -type "String" `
			-value "O:BAG:BAD:(A;;RC;;;BA)"), (
			"Allow only Administrators to remotely call " +
				"the Security Account Manager")),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" `
			-property "UseMachineId" -type "DWord" -value 1),
			"Allow Local System to use computer identity for NTLM"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" `
			-property "LimitBlankPasswordUse" -type "DWord" -value 1), (
			"Prevent access from the network to local " +
				"accounts with blank passwords")),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\LSA\MSV1_0" `
			-property "AllowNullSessionFallback" -type "DWord" -value 0),
			"Prevent NTLM from falling back to a Null session"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Services\LanManServer\Parameters" `
			-property "RequireSecuritySignature" -type "DWord" -value 1),
			"Configure SMB server to always perform SMB packet signing"),
		@((ConfigureRegistry -item ("HKLM:\SYSTEM\CurrentControlSet\" +
				"Services\LanmanWorkstation\Parameters") `
			-property "RequireSecuritySignature" -type "DWord" -value 1),
			"Configure SMB client to always perform SMB packet signing"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows\WinRM\Service" `
			-property "AllowUnencryptedTraffic" -type "DWord" -value 0),
			"Disallow unencrypted WinRM service traffic"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows\WinRM\Client" `
			-property "AllowDigest" -type "DWord" -value 0),
			"Disallow WinRM client digest authentication"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Rpc" `
			-property "RestrictRemoteClients" -type "DWord" -value 1),
			("Restrict unauthenticated RPC clients from " +
				"connecting to the RPC server"))
	)

	ReportMulti "Enable credential protection measures" @(
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" `
			-property "CachedLogonsCount" -type "String" -value "0"),
			"Disable caching of logon credentials"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" `
			-property "RunAsPPL" -type "DWord" -value 1),
			"Enable additional LSA protection"),
		@((ConfigureRegistry -item `
			"HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest" `
			-property "UseLogonCredential" -type "DWord" -value 0),
			"Disable WDigest authentication"),
		@((ConfigureRegistry -item `
			"HKLM:\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation" `
			-property "AllowProtectedCreds" -type "DWord" -value 1), (
			"Enable `"Remote host allows delegation of " +
				"non-exportable credentials`""))
	)

	if (ArgNoAutoRebootWithLoggedOnUsers) {
		ReportMulti ("Do not reboot after an update installation " +
				"if a user is logged on") (
			@((ConfigureRegistry -item `
				"HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" `
				-property "SetActiveHours" -type "DWord" -value 0), (
				"Disable automatic restart after updates " +
					"outside of active hours")),
			@((ConfigureRegistry -item `
				"HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" `
				-property "AUOptions" -type "DWord" -value 4),
				"Automatically download and schedule installation of updates"),
			@((ConfigureRegistry -item `
				"HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" `
				-property "NoAutoRebootWithLoggedOnUsers" `
				-type "DWord" -value 1), (
				"Do not reboot after an update installation " +
					"if a user is logged on")),
			@((ConfigureRegistry -item `
				"HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" `
				-property "ScheduledInstallTime" -type "DWord" -value 3),
				"Schedule update installation time to a specific hour"),
			@((ConfigureRegistry -item `
				"HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" `
				-property "AlwaysAutoRebootAtScheduledTime" `
				-type "DWord" -value 0), (
				"Disable automatic reboot after update installation " +
					"at scheduled time"))
		)
	}

	$local:AMStatus = Get-MpComputerStatus

	$reports = @(
		@((PCCheck (ConfirmConstrainedMode)),
			"PowerShell is configured to run in Constrained Language mode"),
		@((PCCheck (ConfirmLOLBinsBlocked)),
			"Blocking of `"Living Off the Land`" binaries is active"),
		@((PCCheck (EQ $AMStatus.AMServiceEnabled $true)),
			"Antimalware Engine is enabled"),
		@((PCCheck (EQ $AMStatus.AntispywareEnabled $true)),
			"Antispyware protection is enabled"),
		@((PCCheck (EQ $AMStatus.AntivirusEnabled $true)),
			"Antivirus protection is enabled"),
		@((PCCheck (EQ $AMStatus.BehaviorMonitorEnabled $true)),
			"Behavior monitoring is enabled"),
		@((PCCheck (EQ $AMStatus.IoavProtectionEnabled $true)),
			"All downloaded files and attachments are scanned"),
		@((PCCheck (EQ $AMStatus.NISEnabled $true)),
			"NRI Engine is enabled"),
		@((PCCheck (EQ $AMStatus.OnAccessProtectionEnabled $true)),
			"File and program activity monitoring is enabled"),
		@((PCCheck (EQ $AMStatus.RealTimeProtectionEnabled $true)),
			"Real-time protection is enabled"),
		@((PCCheck (EQ $AMStatus.RealTimeScanDirection 0)),
			"Both incoming and outgoing files are scanned"),
		@((PCCheck ("Normal" -ieq $AMStatus.AMRunningMode)),
			"Antimalware running mode is Normal"),
		@((PCCheck (EQ $AMStatus.IsTamperProtected $true)),
			"Windows Defender tamper protection is enabled")
	)

	if (HasSecureBoot) {
		$reports += @(, @((PCCheck (ConfirmSecureBoot)),
			"Secure Boot is active"))
	}

	if (HasHypervisor) {
		$reports += @(, @((PCCheck `
			(EQ $DGStatus.VirtualizationBasedSecurityStatus 2)),
			"Virtualization Based Security is active"))
	}

	if (HasHVCI) {
		$reports += @(, @((PCCheck `
			($DGStatus.SecurityServicesRunning -contains 2)),
			"Hypervisor-protected code integrity is running"))
	}

	ReportMulti "Perform post-configuration checks" $reports
}

ConfigureAll
